{
  "address": "0x918261fa5Dd9C3b1358cA911792E9bDF3c5CCa35",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUninitializedRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTrusted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnresolvedDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_disputeAmount",
          "type": "uint256"
        }
      ],
      "name": "DisputeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "_disputePeriod",
          "type": "uint48"
        }
      ],
      "name": "DisputePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_disputeToken",
          "type": "address"
        }
      ],
      "name": "DisputeTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Disputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "OperatorClaimingToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "OperatorToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "endOfDisputePeriod",
          "type": "uint48"
        }
      ],
      "name": "TreeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "TrustedToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canUpdateMerkleRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint208",
          "name": "amount",
          "type": "uint208"
        },
        {
          "internalType": "uint48",
          "name": "timestamp",
          "type": "uint48"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputePeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "disputeTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endOfDisputePeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICore",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTree",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "onlyOperatorCanClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeAmount",
          "type": "uint256"
        }
      ],
      "name": "setDisputeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_disputePeriod",
          "type": "uint48"
        }
      ],
      "name": "setDisputePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_disputeToken",
          "type": "address"
        }
      ],
      "name": "setDisputeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "toggleOnlyOperatorCanClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "toggleOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        }
      ],
      "name": "toggleTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tree",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ipfsHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MerkleTree",
          "name": "_tree",
          "type": "tuple"
        }
      ],
      "name": "updateTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b56ea0fda9c64e40d66bedb19e85d6369f27397faacd084176929bc0fc739f2",
  "receipt": {
    "to": null,
    "from": "0x9f76a95AA7535bb0893cf88A146396e00ed21A12",
    "contractAddress": "0x918261fa5Dd9C3b1358cA911792E9bDF3c5CCa35",
    "transactionIndex": 0,
    "gasUsed": "2801791",
    "logsBloom": "0x
    "blockHash": "0x7dbfd97d144076f7a18314719aec504dbb7997f9fc74277dde6f644ff89dc993",
    "transactionHash": "0x7b56ea0fda9c64e40d66bedb19e85d6369f27397faacd084176929bc0fc739f2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3216039,
        "transactionHash": "0x7b56ea0fda9c64e40d66bedb19e85d6369f27397faacd084176929bc0fc739f2",
        "address": "0x918261fa5Dd9C3b1358cA911792E9bDF3c5CCa35",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x7dbfd97d144076f7a18314719aec504dbb7997f9fc74277dde6f644ff89dc993"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3216039,
        "transactionHash": "0x7b56ea0fda9c64e40d66bedb19e85d6369f27397faacd084176929bc0fc739f2",
        "address": "0x918261fa5Dd9C3b1358cA911792E9bDF3c5CCa35",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x7dbfd97d144076f7a18314719aec504dbb7997f9fc74277dde6f644ff89dc993"
      }
    ],
    "blockNumber": 3216039,
    "cumulativeGasUsed": "2801791",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b31837c8c7813f102c167ae4fe08d715",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUninitializedRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnresolvedDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeAmount\",\"type\":\"uint256\"}],\"name\":\"DisputeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"_disputePeriod\",\"type\":\"uint48\"}],\"name\":\"DisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_disputeToken\",\"type\":\"address\"}],\"name\":\"DisputeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Disputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"OperatorClaimingToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"OperatorToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"endOfDisputePeriod\",\"type\":\"uint48\"}],\"name\":\"TreeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"TrustedToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canUpdateMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"},{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputePeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"disputeTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endOfDisputePeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onlyOperatorCanClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeAmount\",\"type\":\"uint256\"}],\"name\":\"setDisputeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_disputePeriod\",\"type\":\"uint48\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_disputeToken\",\"type\":\"address\"}],\"name\":\"setDisputeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"toggleOnlyOperatorCanClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"toggleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"}],\"name\":\"toggleTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MerkleTree\",\"name\":\"_tree\",\"type\":\"tuple\"}],\"name\":\"updateTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs. Inc\",\"kind\":\"dev\",\"methods\":{\"claim(address[],address[],uint256[],bytes32[][])\":{\"details\":\"Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of who provides the proof and pays the gas: `msg.sender` is used only for addresses that require a trusted operator\",\"params\":{\"amounts\":\"Amount of tokens that will be sent to the corresponding users\",\"proofs\":\"Array of hashes bridging from a leaf `(hash of user | token | amount)` to the Merkle root\",\"tokens\":\"ERC20 claimed\",\"users\":\"Recipient of tokens\"}},\"disputeTree(string)\":{\"details\":\"Requires a deposit of `disputeToken` that'll be slashed if the dispute is not acceptedIt is only possible to create a dispute within `disputePeriod` after each tree update\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"resolveDispute(bool)\":{\"params\":{\"valid\":\"Whether the dispute was valid\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"disputer\":{\"details\":\"Used to store if there is an ongoing dispute\"}},\"title\":\"Distributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canUpdateMerkleRoot(address)\":{\"notice\":\"Trusted EOAs to update the Merkle root\"},\"claim(address[],address[],uint256[],bytes32[][])\":{\"notice\":\"Claims rewards for a given set of users\"},\"claimed(address,address)\":{\"notice\":\"Mapping user -> token -> amount to track claimed amounts\"},\"core()\":{\"notice\":\"`Core` contract handling access control\"},\"disputeAmount()\":{\"notice\":\"Amount to deposit to freeze the roots update\"},\"disputePeriod()\":{\"notice\":\"Time after which a change in a tree becomes effective, in EPOCH_DURATION\"},\"disputeToken()\":{\"notice\":\"Token to deposit to freeze the roots update\"},\"disputeTree(string)\":{\"notice\":\"Freezes the Merkle tree update until the dispute is resolved\"},\"disputer()\":{\"notice\":\"Address which created the dispute\"},\"endOfDisputePeriod()\":{\"notice\":\"When the current tree will become valid\"},\"getMerkleRoot()\":{\"notice\":\"Returns the MerkleRoot that is currently live for the contract\"},\"lastTree()\":{\"notice\":\"Tree that was in place in the contract before the last `tree` update\"},\"onlyOperatorCanClaim(address)\":{\"notice\":\"Whether or not to disable permissionless claiming\"},\"operators(address,address)\":{\"notice\":\"user -> operator -> authorisation to claim\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Recovers any ERC20 token\"},\"resolveDispute(bool)\":{\"notice\":\"Resolve the ongoing dispute, if any\"},\"revokeTree()\":{\"notice\":\"Allows the governor or the guardian of this contract to fallback to the last version of the tree immediately\"},\"setDisputeAmount(uint256)\":{\"notice\":\"Sets the amount of `disputeToken` used as a caution during disputes\"},\"setDisputePeriod(uint48)\":{\"notice\":\"Sets the dispute period after which a tree update becomes effective\"},\"setDisputeToken(address)\":{\"notice\":\"Sets the token used as a caution during disputes\"},\"toggleOnlyOperatorCanClaim(address)\":{\"notice\":\"Toggles permissioned claiming for a given user\"},\"toggleOperator(address,address)\":{\"notice\":\"Toggles whitelisting for a given user and a given operator\"},\"toggleTrusted(address)\":{\"notice\":\"Adds or removes EOAs which are trusted to update the Merkle root\"},\"tree()\":{\"notice\":\"Tree of claimable tokens through this contract\"},\"updateTree((bytes32,bytes32))\":{\"notice\":\"Updates Merkle Tree\"}},\"notice\":\"Allows LPs on AMMs with concentrated liquidity to claim the rewards that were distributed to them\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Distributor.sol\":\"Distributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/Distributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./utils/UUPSHelper.sol\\\";\\n\\nstruct MerkleTree {\\n    // Root of a Merkle tree which leaves are `(address user, address token, uint amount)`\\n    // representing an amount of tokens accumulated by `user`.\\n    // The Merkle tree is assumed to have only increasing amounts: that is to say if a user can claim 1,\\n    // then after the amount associated in the Merkle tree for this token should be x > 1\\n    bytes32 merkleRoot;\\n    // Ipfs hash of the tree data\\n    bytes32 ipfsHash;\\n}\\n\\nstruct Claim {\\n    uint208 amount;\\n    uint48 timestamp;\\n    bytes32 merkleRoot;\\n}\\n\\n/// @title Distributor\\n/// @notice Allows LPs on AMMs with concentrated liquidity to claim the rewards that were distributed to them\\n/// @author Angle Labs. Inc\\ncontract Distributor is UUPSHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Epoch duration\\n    uint32 internal constant _EPOCH_DURATION = 3600;\\n\\n    // ================================= VARIABLES =================================\\n\\n    /// @notice Tree of claimable tokens through this contract\\n    MerkleTree public tree;\\n\\n    /// @notice Tree that was in place in the contract before the last `tree` update\\n    MerkleTree public lastTree;\\n\\n    /// @notice Token to deposit to freeze the roots update\\n    IERC20 public disputeToken;\\n\\n    /// @notice `Core` contract handling access control\\n    ICore public core;\\n\\n    /// @notice Address which created the dispute\\n    /// @dev Used to store if there is an ongoing dispute\\n    address public disputer;\\n\\n    /// @notice When the current tree will become valid\\n    uint48 public endOfDisputePeriod;\\n\\n    /// @notice Time after which a change in a tree becomes effective, in EPOCH_DURATION\\n    uint48 public disputePeriod;\\n\\n    /// @notice Amount to deposit to freeze the roots update\\n    uint256 public disputeAmount;\\n\\n    /// @notice Mapping user -> token -> amount to track claimed amounts\\n    mapping(address => mapping(address => Claim)) public claimed;\\n\\n    /// @notice Trusted EOAs to update the Merkle root\\n    mapping(address => uint256) public canUpdateMerkleRoot;\\n\\n    /// @notice Whether or not to disable permissionless claiming\\n    mapping(address => uint256) public onlyOperatorCanClaim;\\n\\n    /// @notice user -> operator -> authorisation to claim\\n    mapping(address => mapping(address => uint256)) public operators;\\n\\n    uint256[38] private __gap;\\n\\n    // =================================== EVENTS ==================================\\n\\n    event Claimed(address indexed user, address indexed token, uint256 amount);\\n    event DisputeAmountUpdated(uint256 _disputeAmount);\\n    event Disputed(string reason);\\n    event DisputePeriodUpdated(uint48 _disputePeriod);\\n    event DisputeResolved(bool valid);\\n    event DisputeTokenUpdated(address indexed _disputeToken);\\n    event OperatorClaimingToggled(address indexed user, bool isEnabled);\\n    event OperatorToggled(address indexed user, address indexed operator, bool isWhitelisted);\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n    event Revoked(); // With this event an indexer could maintain a table (timestamp, merkleRootUpdate)\\n    event TreeUpdated(bytes32 merkleRoot, bytes32 ipfsHash, uint48 endOfDisputePeriod);\\n    event TrustedToggled(address indexed eoa, bool trust);\\n\\n    // ================================= MODIFIERS =================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    /// @notice Checks whether the `msg.sender` is the `user` address or is a trusted address\\n    modifier onlyTrustedOrUser(address user) {\\n        if (user != msg.sender && canUpdateMerkleRoot[msg.sender] != 1 && !core.isGovernorOrGuardian(msg.sender))\\n            revert NotTrusted();\\n        _;\\n    }\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    constructor() initializer {}\\n\\n    function initialize(ICore _core) external initializer {\\n        if (address(_core) == address(0)) revert ZeroAddress();\\n        core = _core;\\n    }\\n\\n    /// @inheritdoc UUPSUpgradeable\\n    function _authorizeUpgrade(address) internal view override onlyGuardianUpgrader(core) {}\\n\\n    // =============================== MAIN FUNCTION ===============================\\n\\n    /// @notice Claims rewards for a given set of users\\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\\n    /// who provides the proof and pays the gas: `msg.sender` is used only for addresses that require a trusted operator\\n    /// @param users Recipient of tokens\\n    /// @param tokens ERC20 claimed\\n    /// @param amounts Amount of tokens that will be sent to the corresponding users\\n    /// @param proofs Array of hashes bridging from a leaf `(hash of user | token | amount)` to the Merkle root\\n    function claim(\\n        address[] calldata users,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        uint256 usersLength = users.length;\\n        if (\\n            usersLength == 0 ||\\n            usersLength != tokens.length ||\\n            usersLength != amounts.length ||\\n            usersLength != proofs.length\\n        ) revert InvalidLengths();\\n\\n        for (uint256 i; i < usersLength; ) {\\n            address user = users[i];\\n            address token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            // Checking if only an approved operator can claim for `user`\\n            if (onlyOperatorCanClaim[user] == 1 && operators[user][msg.sender] == 0) revert NotWhitelisted();\\n\\n            // Verifying proof\\n            bytes32 leaf = keccak256(abi.encode(user, token, amount));\\n            if (!_verifyProof(leaf, proofs[i])) revert InvalidProof();\\n\\n            // Closing reentrancy gate here\\n            uint256 toSend = amount - claimed[user][token].amount;\\n            claimed[user][token] = Claim(SafeCast.toUint208(amount), uint48(block.timestamp), getMerkleRoot());\\n\\n            IERC20(token).safeTransfer(user, toSend);\\n            emit Claimed(user, token, toSend);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the MerkleRoot that is currently live for the contract\\n    function getMerkleRoot() public view returns (bytes32) {\\n        if (block.timestamp >= endOfDisputePeriod && disputer == address(0)) return tree.merkleRoot;\\n        else return lastTree.merkleRoot;\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTIONS ===========================\\n\\n    /// @notice Adds or removes EOAs which are trusted to update the Merkle root\\n    function toggleTrusted(address eoa) external onlyGovernorOrGuardian {\\n        uint256 trustedStatus = 1 - canUpdateMerkleRoot[eoa];\\n        canUpdateMerkleRoot[eoa] = trustedStatus;\\n        emit TrustedToggled(eoa, trustedStatus == 1);\\n    }\\n\\n    /// @notice Updates Merkle Tree\\n    function updateTree(MerkleTree calldata _tree) external {\\n        if (\\n            disputer != address(0) ||\\n            // A trusted address cannot update a tree right after a precedent tree update otherwise it can de facto\\n            // validate a tree which has not passed the dispute period\\n            ((canUpdateMerkleRoot[msg.sender] != 1 || block.timestamp < endOfDisputePeriod) &&\\n                !core.isGovernorOrGuardian(msg.sender))\\n        ) revert NotTrusted();\\n        MerkleTree memory _lastTree = tree;\\n        tree = _tree;\\n        lastTree = _lastTree;\\n\\n        uint48 _endOfPeriod = _endOfDisputePeriod(uint48(block.timestamp));\\n        endOfDisputePeriod = _endOfPeriod;\\n        emit TreeUpdated(_tree.merkleRoot, _tree.ipfsHash, _endOfPeriod);\\n    }\\n\\n    /// @notice Freezes the Merkle tree update until the dispute is resolved\\n    /// @dev Requires a deposit of `disputeToken` that'll be slashed if the dispute is not accepted\\n    /// @dev It is only possible to create a dispute within `disputePeriod` after each tree update\\n    function disputeTree(string memory reason) external {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        if (block.timestamp >= endOfDisputePeriod) revert InvalidDispute();\\n        IERC20(disputeToken).safeTransferFrom(msg.sender, address(this), disputeAmount);\\n        disputer = msg.sender;\\n        emit Disputed(reason);\\n    }\\n\\n    /// @notice Resolve the ongoing dispute, if any\\n    /// @param valid Whether the dispute was valid\\n    function resolveDispute(bool valid) external onlyGovernorOrGuardian {\\n        if (disputer == address(0)) revert NoDispute();\\n        if (valid) {\\n            IERC20(disputeToken).safeTransfer(disputer, disputeAmount);\\n            // If a dispute is valid, the contract falls back to the last tree that was updated\\n            _revokeTree();\\n        } else {\\n            IERC20(disputeToken).safeTransfer(msg.sender, disputeAmount);\\n            endOfDisputePeriod = _endOfDisputePeriod(uint48(block.timestamp));\\n        }\\n        disputer = address(0);\\n        emit DisputeResolved(valid);\\n    }\\n\\n    /// @notice Allows the governor or the guardian of this contract to fallback to the last version of the tree\\n    /// immediately\\n    function revokeTree() external onlyGovernorOrGuardian {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        _revokeTree();\\n    }\\n\\n    /// @notice Toggles permissioned claiming for a given user\\n    function toggleOnlyOperatorCanClaim(address user) external onlyTrustedOrUser(user) {\\n        uint256 oldValue = onlyOperatorCanClaim[user];\\n        onlyOperatorCanClaim[user] = 1 - oldValue;\\n        emit OperatorClaimingToggled(user, oldValue == 0);\\n    }\\n\\n    /// @notice Toggles whitelisting for a given user and a given operator\\n    function toggleOperator(address user, address operator) external onlyTrustedOrUser(user) {\\n        uint256 oldValue = operators[user][operator];\\n        operators[user][operator] = 1 - oldValue;\\n        emit OperatorToggled(user, operator, oldValue == 0);\\n    }\\n\\n    /// @notice Recovers any ERC20 token\\n    function recoverERC20(address tokenAddress, address to, uint256 amountToRecover) external onlyGovernorOrGuardian {\\n        IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Sets the dispute period after which a tree update becomes effective\\n    function setDisputePeriod(uint48 _disputePeriod) external onlyGovernorOrGuardian {\\n        disputePeriod = uint48(_disputePeriod);\\n        emit DisputePeriodUpdated(_disputePeriod);\\n    }\\n\\n    /// @notice Sets the token used as a caution during disputes\\n    function setDisputeToken(IERC20 _disputeToken) external onlyGovernorOrGuardian {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        disputeToken = _disputeToken;\\n        emit DisputeTokenUpdated(address(_disputeToken));\\n    }\\n\\n    /// @notice Sets the amount of `disputeToken` used as a caution during disputes\\n    function setDisputeAmount(uint256 _disputeAmount) external onlyGovernorOrGuardian {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        disputeAmount = _disputeAmount;\\n        emit DisputeAmountUpdated(_disputeAmount);\\n    }\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Fallback to the last version of the tree\\n    function _revokeTree() internal {\\n        MerkleTree memory _tree = lastTree;\\n        endOfDisputePeriod = 0;\\n        tree = _tree;\\n        emit Revoked();\\n        emit TreeUpdated(\\n            _tree.merkleRoot,\\n            _tree.ipfsHash,\\n            (uint48(block.timestamp) / _EPOCH_DURATION) * (_EPOCH_DURATION) // Last hour\\n        );\\n    }\\n\\n    /// @notice Returns the end of the dispute period\\n    /// @dev treeUpdate is rounded up to next hour and then `disputePeriod` hours are added\\n    function _endOfDisputePeriod(uint48 treeUpdate) internal view returns (uint48) {\\n        return ((treeUpdate - 1) / _EPOCH_DURATION + 1 + disputePeriod) * (_EPOCH_DURATION);\\n    }\\n\\n    /// @notice Checks the validity of a proof\\n    /// @param leaf Hashed leaf data, the starting point of the proof\\n    /// @param proof Array of hashes forming a hash chain from leaf to root\\n    /// @return true If proof is correct, else false\\n    function _verifyProof(bytes32 leaf, bytes32[] memory proof) internal view returns (bool) {\\n        bytes32 currentHash = leaf;\\n        uint256 proofLength = proof.length;\\n        for (uint256 i; i < proofLength; ) {\\n            if (currentHash < proof[i]) {\\n                currentHash = keccak256(abi.encode(currentHash, proof[i]));\\n            } else {\\n                currentHash = keccak256(abi.encode(proof[i], currentHash));\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        bytes32 root = getMerkleRoot();\\n        if (root == bytes32(0)) revert InvalidUninitializedRoot();\\n        return currentHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xe59a10e2d62c9088ae8959ac6d839d995863832ea9fdb71485674264a21a9510\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\n/// @title ICore\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `Core` contracts of smart contract modules used in Angle Labs contracts\\ninterface ICore {\\n    /// @notice Checks whether an address is governor\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is a governor or a guardian of a module\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb37fb32979570ed78511625feb6c3856c200a879d6789eef6eb13093b628a0e9\",\"license\":\"GPL-3.0\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nerror InvalidDispute();\\nerror InvalidLengths();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidProof();\\nerror InvalidUninitializedRoot();\\nerror InvalidReward();\\nerror InvalidSignature();\\nerror NoDispute();\\nerror NotGovernor();\\nerror NotGovernorOrGuardian();\\nerror NotSigned();\\nerror NotTrusted();\\nerror NotWhitelisted();\\nerror UnresolvedDispute();\\nerror ZeroAddress();\\n\",\"keccak256\":\"0x7cd16f5988dee579532a71ff4afd8668c75add546e7e4724c1aaadd888355139\",\"license\":\"GPL-3.0\"},\"contracts/utils/UUPSHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\n/// @title UUPSHelper\\n/// @notice Helper contract for UUPSUpgradeable contracts where the upgradeability is controlled by a specific address\\n/// @author Angle Labs., Inc\\n/// @dev The 0 address check in the modifier allows the use of these modifiers during initialization\\nabstract contract UUPSHelper is UUPSUpgradeable {\\n    modifier onlyGuardianUpgrader(ICore _core) {\\n        if (address(_core) != address(0) && !_core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    modifier onlyGovernorUpgrader(ICore _core) {\\n        if (address(_core) != address(0) && !_core.isGovernor(msg.sender)) revert NotGovernor();\\n        _;\\n    }\\n\\n    constructor() initializer {}\\n}\\n\",\"keccak256\":\"0xafd8edf5814fb1c65a82ec67d7dc02c9fa02e17689ab618d0fa8fc81dc5508a0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234620000495730608052620000186200004e565b620000226200004e565b60405161319d90816200015a82396080518181816116500152818161179f0152611da50152f35b600080fd5b60005460ff8160081c1615908180926200014b575b801562000132575b15620000d65760ff19811660011760005581620000c3575b506200008b57565b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1565b61ffff1916610101176000553862000083565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156200006b5750600160ff8216146200006b565b50600160ff8216106200006356fe60808060405260048036101561001457600080fd5b60003560e01c91826309454ba314612835575081630c9cbf0e146127885781630d10fca31461269b5781631171bda914612594578163147691421461252f5781632637588e146124b257816328827838146123125781632a25dd41146121735781633659cfe614611d535781634641fdef14611bf05781634959065714611baf5781634f1ef2861461172457816352d1902d1461160a5781635bf31d4d146115cb5781635cec892a14611584578163623b9e9d1461146c5781636ac561031461141a57816371ee95c014610d665781637ee8434914610bfd57816389e1e82a146109f657816395788835146108e2578163bdac7ca31461074a578163c4d66de814610520578163c748d261146104ce578163cce80e7a1461048b578163d9c980871461025f57508063e57480e5146101fa578063f2f4eb26146101a85763fd54b2281461016057600080fd5b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357604060655460665482519182526020820152f35b600080fd5b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602073ffffffffffffffffffffffffffffffffffffffff606a5416604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff61024661286e565b16600052606e6020526020604060002054604051908152f35b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357606b5473ffffffffffffffffffffffffffffffffffffffff80821615908115916103be575b50610395579060206103907f23aa2e4f757a7bd974085d3e11439a843b137b30905e3ffd51b2097c34aef62e93604051936102ed856128b4565b606554948581526066549485910152359283606555602435948560665560675560685561032165ffffffffffff42166130f0565b907fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff00000000000000000000000000000000000000008360a01b16911617606b556040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a1005b506040517fc22a648e000000000000000000000000000000000000000000000000000000008152fd5b905033600052606e60205260016040600020541490811591610475575b816103e8575b50836102b3565b60249150602090606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa9081156104695760009161043b575b5015836103e1565b61045c915060203d8111610462575b610454818361291b565b810190612cff565b83610433565b503d61044a565b6040513d6000823e3d90fd5b905065ffffffffffff8260a01c164210906103db565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357604060675460685482519182526020820152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602073ffffffffffffffffffffffffffffffffffffffff60695416604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803573ffffffffffffffffffffffffffffffffffffffff81168091036101a3576000549160ff8360081c16159283809461073d575b8015610726575b156106a2578360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055610673575b50811561064b57507fffffffffffffffffffffffff0000000000000000000000000000000000000000606a541617606a556105f657005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b6040517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117600055836105bf565b6084826020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b15801561058b5750600160ff82161461058b565b50600160ff821610610584565b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35761078161286e565b610789612891565b9173ffffffffffffffffffffffffffffffffffffffff8092169133831415806108c9575b8061085a575b610395578260005260706020526040600020931692836000526020526040600020549081600103906001821161082c57507f42343f44c66ea1eaffa334760d3da2cb731d2a0b3b3e30423df997faa36cc95c916020918460005260708352604060002086600052835260406000205560405190158152a3005b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b506024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa908115610469576000916108ab575b50156107b3565b6108c3915060203d811161046257610454818361291b565b856108a4565b5033600052606e602052600160406000205414156107ad565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff6024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa908115610469576000916109d8575b50156109af57606b541661098757610985613019565b005b6040517f05832574000000000000000000000000000000000000000000000000000000008152fd5b506040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b6109f0915060203d811161046257610454818361291b565b8361096f565b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803590811515918281036101a35773ffffffffffffffffffffffffffffffffffffffff906024602083606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233898301525afa90811561046957600091610bdf575b5015610bb657606b928284541615610b8e577f8015c5005d9ad5d85ca80d3f894f08e0159277704c54166e5cff108800fa80cd60208686868615610b1d5780610ae6916069541690835416606c5491612d77565b610aee613019565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055604051908152a1005b610b309060695416606c54903390612d77565b610b4165ffffffffffff42166130f0565b7fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff000000000000000000000000000000000000000083549260a01b169116178155610aee565b6040517f93754748000000000000000000000000000000000000000000000000000000008152fd5b826040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b610bf7915060203d811161046257610454818361291b565b85610a92565b346101a3576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357610c3561286e565b73ffffffffffffffffffffffffffffffffffffffff9060248383606a5416604051928380927f521d4de9000000000000000000000000000000000000000000000000000000008252338a8301525afa90811561046957600091610d49575b5015610d2057169081600052606e815260406000205460010360018111610cf257907f7628ea5f6112a16b36a8239aa208395a8e8f221688cfb3a5461faffb9700abcd9183600052606e825280604060002055600160405191148152a2005b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b836040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b610d609150843d861161046257610454818361291b565b85610c93565b346101a35760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803567ffffffffffffffff81116101a357610db390369083016129cd565b909160243567ffffffffffffffff81116101a357610dd490369083016129cd565b92909160443567ffffffffffffffff81116101a357610df690369083016129cd565b909560643567ffffffffffffffff81116101a357610e1790369085016129cd565b94909281158015611410575b8015611406575b80156113fc575b6113d35760005b828110610e4157005b878a610e718385610e6b610e608f8490610e65610e60838f8f90612d17565b612d56565b98612d17565b93612d17565b359073ffffffffffffffffffffffffffffffffffffffff8316600052606f602052600160406000205414806113b5575b61138c576040805173ffffffffffffffffffffffffffffffffffffffff858116602083019081529084169282019290925260608082018590528152610ee760808261291b565b5190208a85101561135e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1893603018560051b8a013512156101a35767ffffffffffffffff8560051b8a01358a0135116101a357600585811b8a01358a01803590911b36036020909101136101a35760405190610f7460208760051b8c01358c013560051b018361291b565b600586811b8b01358b0180358085526020808601933692901b909201909101116101a35760208760051b8c01358c0101905b600588811b8d01358d01803590911b01602001821061134e575050908051906000915b8083106112cf57505050610fdb612f85565b9081156112a6570361127d5773ffffffffffffffffffffffffffffffffffffffff8316600052606d602052604060002073ffffffffffffffffffffffffffffffffffffffff821660005260205279ffffffffffffffffffffffffffffffffffffffffffffffffffff6040600020541682039180831161124f5779ffffffffffffffffffffffffffffffffffffffffffffffffffff81116111cb5761107d612f85565b6040519182606081011067ffffffffffffffff60608501111761119d5773ffffffffffffffffffffffffffffffffffffffff600197969594848960209579ffffffffffffffffffffffffffffffffffffffffffffffffffff859660607ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839a0160405216835286830165ffffffffffff4216815260408401918252858b16600052606d8852604060002086861660005288527fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffffffffffffffffffffffffffffffffffffffffffff6040600020955116915160d01b161783555191015561118c8688848416612d77565b60405195865216941692a301610e38565b60418c7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b60848a6020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f30382062697473000000000000000000000000000000000000000000000000006064820152fd5b60118a7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b886040517f09bde339000000000000000000000000000000000000000000000000000000008152fd5b8a6040517f094ad658000000000000000000000000000000000000000000000000000000008152fd5b9091926001906112df8585613153565b5181101561131c576112f18585613153565b51604051906020820192835260408201526040815261130f816128ff565b519020935b019190610fc9565b6113268585613153565b51906040519060208201928352604082015260408152611345816128ff565b51902093611314565b8135815260209182019101610fa6565b60328a7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b886040517f584a7938000000000000000000000000000000000000000000000000000000008152fd5b50607060205260406000203360005260205260406000205415610ea1565b846040517f1df89e8b000000000000000000000000000000000000000000000000000000008152fd5b5085821415610e31565b5080821415610e2a565b5087821415610e23565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602073ffffffffffffffffffffffffffffffffffffffff606b5416604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35780359073ffffffffffffffffffffffffffffffffffffffff8083168093036101a3576024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa90811561046957600091611566575b50156109af57606b54166109875750807fffffffffffffffffffffffff000000000000000000000000000000000000000060695416176069557f1db8d6629941dcb63d5e0c927b89c174c714e139a4b9107a49de839d755f5d74600080a2005b61157e915060203d811161046257610454818361291b565b84611506565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602065ffffffffffff606b5460a01c16604051908152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576020606b5460d01c604051908152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036116a05760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6084906020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35761175661286e565b6024803567ffffffffffffffff81116101a357366023820112156101a35761178690369083818701359101612996565b73ffffffffffffffffffffffffffffffffffffffff90817f000000000000000000000000000000000000000000000000000000000000000016916117cc833014156129fe565b6117fb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614612a89565b80606a5416848115159182611b43575b5050611b1a577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561184957505050506109859150612b14565b849192939416604051937f52d1902d00000000000000000000000000000000000000000000000000000000855260209485818981865afa60009181611aeb575b5061191057608488602e8989604051937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b95919293949503611a695761192483612b14565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611a61575b61195e57005b823b156119e2575050815161098594506000928392908501905af4611981612c00565b907f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051936119b0856128ff565b602785528401527f206661696c6564000000000000000000000000000000000000000000000000006040840152612c30565b90602660849286887f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506001611958565b85602960849287604051937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d8311611b13575b611b03818361291b565b810103126101a357519089611889565b503d611af9565b856040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b6020919250604051928380927f521d4de9000000000000000000000000000000000000000000000000000000008252338c8301525afa90811561046957600091611b91575b5015848861180b565b611ba9915060203d811161046257610454818361291b565b87611b88565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576020611be8612f85565b604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803565ffffffffffff8116918282036101a3576024602073ffffffffffffffffffffffffffffffffffffffff606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233878301525afa90811561046957600091611d35575b5015611d0d577ffdf22e84af74bd4ab6b9646f6370a02bc886ed6ac25882db14e4ebf4b8e3bc7e6020848479ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff0000000000000000000000000000000000000000000000000000606b549260d01b16911617606b55604051908152a1005b6040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b611d4d915060203d811161046257610454818361291b565b84611c8f565b346101a357602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357611d8c61286e565b9173ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016611dd1813014156129fe565b611e007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614612a89565b81606a5416838115159182612109575b5050610d2057604051908382019282841067ffffffffffffffff8511176120db57836040526000835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014611e745750505050505061098590612b14565b8616906040517f52d1902d00000000000000000000000000000000000000000000000000000000815285818881865afa600091816120ac575b50611f355760848787604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9591929394950361202957611f4986612b14565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2825115801590612021575b611f8357005b853b15611fa157505061098593600092839251915af4611981612c00565b90846084927f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506000611f7d565b60849085604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d83116120d4575b6120c4818361291b565b810103126101a357519089611ead565b503d6120ba565b6041867f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b60249250604051928380927f521d4de9000000000000000000000000000000000000000000000000000000008252338a8301525afa90811561046957600091612156575b50158387611e10565b61216d9150843d861161046257610454818361291b565b8661214d565b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803567ffffffffffffffff81116101a357366023820112156101a3576121d19036906024818501359101612996565b90606b549073ffffffffffffffffffffffffffffffffffffffff918281166122e95760a01c65ffffffffffff164210156122c157606954606c546040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201523360248201523060448201526064808201929092529081527f5eca00b8ed745eee61451333090bfa56aa1f2a9e696a2aebe5f1f5b6cef6f2ff9161039091869161228b9190871661228660848361291b565b612de6565b337fffffffffffffffffffffffff0000000000000000000000000000000000000000606b541617606b5560405191829182612c4c565b6040517f1a8f0395000000000000000000000000000000000000000000000000000000008152fd5b506040517f05832574000000000000000000000000000000000000000000000000000000008152fd5b346101a3576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff908161236161286e565b169181338414159182612496575b82612428575b50506123ff5781600052606f815260406000205480600103600181116123d157837f81d714ca01079a19c106993b49b2764df6bb6abe740164ef7b77ee9c100a024a949550600052606f835260406000205560405190158152a2005b6011857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b826040517fc22a648e000000000000000000000000000000000000000000000000000000008152fd5b60249250606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233898301525afa90811561046957600091612479575b50158185612375565b6124909150823d841161046257610454818361291b565b84612470565b91505033600052606e825281600160406000205414159161236f565b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576124e961286e565b6124f1612891565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526070602052604060002091166000526020526020604060002054604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff61257b61286e565b16600052606f6020526020604060002054604051908152f35b346101a35760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576125cb61286e565b906125d4612891565b906044359273ffffffffffffffffffffffffffffffffffffffff916024602084606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233878301525afa9081156104695760009161267d575b5015611d0d5750817ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648926020921693612672868287612d77565b6040519586521693a3005b612695915060203d811161046257610454818361291b565b86612638565b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35780359073ffffffffffffffffffffffffffffffffffffffff6024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa9081156104695760009161276a575b50156109af57606b5416610987577f39bb629f3d59f5eddf978050e1f5fabeca2b5d02dfc9c25e84f32e7da1069db460208380606c55604051908152a1005b612782915060203d811161046257610454818361291b565b8461272b565b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576127bf61286e565b6127c7612891565b9073ffffffffffffffffffffffffffffffffffffffff809116600052606d6020526040600020911660005260205260606040600020600181549101546040519179ffffffffffffffffffffffffffffffffffffffffffffffffffff8116835260d01c60208301526040820152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602090606c548152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101a357565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036101a357565b6040810190811067ffffffffffffffff8211176128d057604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176128d057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176128d057604052565b67ffffffffffffffff81116128d057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926129a28261295c565b916129b0604051938461291b565b8294818452818301116101a3578281602093846000960137010152565b9181601f840112156101a35782359167ffffffffffffffff83116101a3576020808501948460051b0101116101a357565b15612a0557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15612a9057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15612b7c5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15612c2b573d90612c118261295c565b91612c1f604051938461291b565b82523d6000602084013e565b606090565b909160609115612c3f57505090565b612c4a919392612cb2565b565b60208082528251818301819052939260005b858110612c9e575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201612c5e565b805190925015612cc55750805190602001fd5b612cfb906040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301612c4c565b0390fd5b908160209103126101a3575180151581036101a35790565b9190811015612d275760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101a35790565b9173ffffffffffffffffffffffffffffffffffffffff604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff8411176128d057612c4a926040525b604051612e519173ffffffffffffffffffffffffffffffffffffffff16612e0c826128b4565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1612e4b612c00565b91612efa565b80519081612e5e57505050565b8280612e6e938301019101612cff565b15612e765750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919260609115612f78575050815115612f11575090565b3b15612f1a5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909392612c4a9250612cb2565b606b5465ffffffffffff8160a01c164210159081612fb0575b5015612faa5760655490565b60675490565b73ffffffffffffffffffffffffffffffffffffffff9150161538612f9e565b90610e1065ffffffffffff80931602918216918203612fea57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f23aa2e4f757a7bd974085d3e11439a843b137b30905e3ffd51b2097c34aef62e6020604051613048816128b4565b6067549081815260685492839101527fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff606b5416606b5580606555816066557f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee6600080a16130eb6130c4610e1065ffffffffffff421604612fcf565b6040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff80921601818111612fea5781610e108160019316041601818111612fea5781606b5460d01c911601908111612fea5761315090612fcf565b90565b8051821015612d275760209160051b01019056fea26469706673582212204bc7c5ce91f161796c008fa7cc197fa667e89433ebbad74f961f82a7ff3d5b7964736f6c63430008110033",
  "deployedBytecode": "0x60808060405260048036101561001457600080fd5b60003560e01c91826309454ba314612835575081630c9cbf0e146127885781630d10fca31461269b5781631171bda914612594578163147691421461252f5781632637588e146124b257816328827838146123125781632a25dd41146121735781633659cfe614611d535781634641fdef14611bf05781634959065714611baf5781634f1ef2861461172457816352d1902d1461160a5781635bf31d4d146115cb5781635cec892a14611584578163623b9e9d1461146c5781636ac561031461141a57816371ee95c014610d665781637ee8434914610bfd57816389e1e82a146109f657816395788835146108e2578163bdac7ca31461074a578163c4d66de814610520578163c748d261146104ce578163cce80e7a1461048b578163d9c980871461025f57508063e57480e5146101fa578063f2f4eb26146101a85763fd54b2281461016057600080fd5b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357604060655460665482519182526020820152f35b600080fd5b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602073ffffffffffffffffffffffffffffffffffffffff606a5416604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff61024661286e565b16600052606e6020526020604060002054604051908152f35b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357606b5473ffffffffffffffffffffffffffffffffffffffff80821615908115916103be575b50610395579060206103907f23aa2e4f757a7bd974085d3e11439a843b137b30905e3ffd51b2097c34aef62e93604051936102ed856128b4565b606554948581526066549485910152359283606555602435948560665560675560685561032165ffffffffffff42166130f0565b907fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff00000000000000000000000000000000000000008360a01b16911617606b556040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a1005b506040517fc22a648e000000000000000000000000000000000000000000000000000000008152fd5b905033600052606e60205260016040600020541490811591610475575b816103e8575b50836102b3565b60249150602090606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa9081156104695760009161043b575b5015836103e1565b61045c915060203d8111610462575b610454818361291b565b810190612cff565b83610433565b503d61044a565b6040513d6000823e3d90fd5b905065ffffffffffff8260a01c164210906103db565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357604060675460685482519182526020820152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602073ffffffffffffffffffffffffffffffffffffffff60695416604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803573ffffffffffffffffffffffffffffffffffffffff81168091036101a3576000549160ff8360081c16159283809461073d575b8015610726575b156106a2578360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055610673575b50811561064b57507fffffffffffffffffffffffff0000000000000000000000000000000000000000606a541617606a556105f657005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b6040517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117600055836105bf565b6084826020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b15801561058b5750600160ff82161461058b565b50600160ff821610610584565b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35761078161286e565b610789612891565b9173ffffffffffffffffffffffffffffffffffffffff8092169133831415806108c9575b8061085a575b610395578260005260706020526040600020931692836000526020526040600020549081600103906001821161082c57507f42343f44c66ea1eaffa334760d3da2cb731d2a0b3b3e30423df997faa36cc95c916020918460005260708352604060002086600052835260406000205560405190158152a3005b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b506024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa908115610469576000916108ab575b50156107b3565b6108c3915060203d811161046257610454818361291b565b856108a4565b5033600052606e602052600160406000205414156107ad565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff6024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa908115610469576000916109d8575b50156109af57606b541661098757610985613019565b005b6040517f05832574000000000000000000000000000000000000000000000000000000008152fd5b506040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b6109f0915060203d811161046257610454818361291b565b8361096f565b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803590811515918281036101a35773ffffffffffffffffffffffffffffffffffffffff906024602083606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233898301525afa90811561046957600091610bdf575b5015610bb657606b928284541615610b8e577f8015c5005d9ad5d85ca80d3f894f08e0159277704c54166e5cff108800fa80cd60208686868615610b1d5780610ae6916069541690835416606c5491612d77565b610aee613019565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055604051908152a1005b610b309060695416606c54903390612d77565b610b4165ffffffffffff42166130f0565b7fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff000000000000000000000000000000000000000083549260a01b169116178155610aee565b6040517f93754748000000000000000000000000000000000000000000000000000000008152fd5b826040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b610bf7915060203d811161046257610454818361291b565b85610a92565b346101a3576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357610c3561286e565b73ffffffffffffffffffffffffffffffffffffffff9060248383606a5416604051928380927f521d4de9000000000000000000000000000000000000000000000000000000008252338a8301525afa90811561046957600091610d49575b5015610d2057169081600052606e815260406000205460010360018111610cf257907f7628ea5f6112a16b36a8239aa208395a8e8f221688cfb3a5461faffb9700abcd9183600052606e825280604060002055600160405191148152a2005b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b836040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b610d609150843d861161046257610454818361291b565b85610c93565b346101a35760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803567ffffffffffffffff81116101a357610db390369083016129cd565b909160243567ffffffffffffffff81116101a357610dd490369083016129cd565b92909160443567ffffffffffffffff81116101a357610df690369083016129cd565b909560643567ffffffffffffffff81116101a357610e1790369085016129cd565b94909281158015611410575b8015611406575b80156113fc575b6113d35760005b828110610e4157005b878a610e718385610e6b610e608f8490610e65610e60838f8f90612d17565b612d56565b98612d17565b93612d17565b359073ffffffffffffffffffffffffffffffffffffffff8316600052606f602052600160406000205414806113b5575b61138c576040805173ffffffffffffffffffffffffffffffffffffffff858116602083019081529084169282019290925260608082018590528152610ee760808261291b565b5190208a85101561135e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1893603018560051b8a013512156101a35767ffffffffffffffff8560051b8a01358a0135116101a357600585811b8a01358a01803590911b36036020909101136101a35760405190610f7460208760051b8c01358c013560051b018361291b565b600586811b8b01358b0180358085526020808601933692901b909201909101116101a35760208760051b8c01358c0101905b600588811b8d01358d01803590911b01602001821061134e575050908051906000915b8083106112cf57505050610fdb612f85565b9081156112a6570361127d5773ffffffffffffffffffffffffffffffffffffffff8316600052606d602052604060002073ffffffffffffffffffffffffffffffffffffffff821660005260205279ffffffffffffffffffffffffffffffffffffffffffffffffffff6040600020541682039180831161124f5779ffffffffffffffffffffffffffffffffffffffffffffffffffff81116111cb5761107d612f85565b6040519182606081011067ffffffffffffffff60608501111761119d5773ffffffffffffffffffffffffffffffffffffffff600197969594848960209579ffffffffffffffffffffffffffffffffffffffffffffffffffff859660607ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839a0160405216835286830165ffffffffffff4216815260408401918252858b16600052606d8852604060002086861660005288527fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffffffffffffffffffffffffffffffffffffffffffff6040600020955116915160d01b161783555191015561118c8688848416612d77565b60405195865216941692a301610e38565b60418c7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b60848a6020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f30382062697473000000000000000000000000000000000000000000000000006064820152fd5b60118a7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b886040517f09bde339000000000000000000000000000000000000000000000000000000008152fd5b8a6040517f094ad658000000000000000000000000000000000000000000000000000000008152fd5b9091926001906112df8585613153565b5181101561131c576112f18585613153565b51604051906020820192835260408201526040815261130f816128ff565b519020935b019190610fc9565b6113268585613153565b51906040519060208201928352604082015260408152611345816128ff565b51902093611314565b8135815260209182019101610fa6565b60328a7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b886040517f584a7938000000000000000000000000000000000000000000000000000000008152fd5b50607060205260406000203360005260205260406000205415610ea1565b846040517f1df89e8b000000000000000000000000000000000000000000000000000000008152fd5b5085821415610e31565b5080821415610e2a565b5087821415610e23565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602073ffffffffffffffffffffffffffffffffffffffff606b5416604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35780359073ffffffffffffffffffffffffffffffffffffffff8083168093036101a3576024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa90811561046957600091611566575b50156109af57606b54166109875750807fffffffffffffffffffffffff000000000000000000000000000000000000000060695416176069557f1db8d6629941dcb63d5e0c927b89c174c714e139a4b9107a49de839d755f5d74600080a2005b61157e915060203d811161046257610454818361291b565b84611506565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602065ffffffffffff606b5460a01c16604051908152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576020606b5460d01c604051908152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036116a05760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6084906020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35761175661286e565b6024803567ffffffffffffffff81116101a357366023820112156101a35761178690369083818701359101612996565b73ffffffffffffffffffffffffffffffffffffffff90817f000000000000000000000000000000000000000000000000000000000000000016916117cc833014156129fe565b6117fb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614612a89565b80606a5416848115159182611b43575b5050611b1a577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561184957505050506109859150612b14565b849192939416604051937f52d1902d00000000000000000000000000000000000000000000000000000000855260209485818981865afa60009181611aeb575b5061191057608488602e8989604051937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b95919293949503611a695761192483612b14565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611a61575b61195e57005b823b156119e2575050815161098594506000928392908501905af4611981612c00565b907f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051936119b0856128ff565b602785528401527f206661696c6564000000000000000000000000000000000000000000000000006040840152612c30565b90602660849286887f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506001611958565b85602960849287604051937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d8311611b13575b611b03818361291b565b810103126101a357519089611889565b503d611af9565b856040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b6020919250604051928380927f521d4de9000000000000000000000000000000000000000000000000000000008252338c8301525afa90811561046957600091611b91575b5015848861180b565b611ba9915060203d811161046257610454818361291b565b87611b88565b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576020611be8612f85565b604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803565ffffffffffff8116918282036101a3576024602073ffffffffffffffffffffffffffffffffffffffff606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233878301525afa90811561046957600091611d35575b5015611d0d577ffdf22e84af74bd4ab6b9646f6370a02bc886ed6ac25882db14e4ebf4b8e3bc7e6020848479ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff0000000000000000000000000000000000000000000000000000606b549260d01b16911617606b55604051908152a1005b6040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b611d4d915060203d811161046257610454818361291b565b84611c8f565b346101a357602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357611d8c61286e565b9173ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016611dd1813014156129fe565b611e007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614612a89565b81606a5416838115159182612109575b5050610d2057604051908382019282841067ffffffffffffffff8511176120db57836040526000835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014611e745750505050505061098590612b14565b8616906040517f52d1902d00000000000000000000000000000000000000000000000000000000815285818881865afa600091816120ac575b50611f355760848787604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9591929394950361202957611f4986612b14565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2825115801590612021575b611f8357005b853b15611fa157505061098593600092839251915af4611981612c00565b90846084927f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506000611f7d565b60849085604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d83116120d4575b6120c4818361291b565b810103126101a357519089611ead565b503d6120ba565b6041867f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b60249250604051928380927f521d4de9000000000000000000000000000000000000000000000000000000008252338a8301525afa90811561046957600091612156575b50158387611e10565b61216d9150843d861161046257610454818361291b565b8661214d565b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357803567ffffffffffffffff81116101a357366023820112156101a3576121d19036906024818501359101612996565b90606b549073ffffffffffffffffffffffffffffffffffffffff918281166122e95760a01c65ffffffffffff164210156122c157606954606c546040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201523360248201523060448201526064808201929092529081527f5eca00b8ed745eee61451333090bfa56aa1f2a9e696a2aebe5f1f5b6cef6f2ff9161039091869161228b9190871661228660848361291b565b612de6565b337fffffffffffffffffffffffff0000000000000000000000000000000000000000606b541617606b5560405191829182612c4c565b6040517f1a8f0395000000000000000000000000000000000000000000000000000000008152fd5b506040517f05832574000000000000000000000000000000000000000000000000000000008152fd5b346101a3576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff908161236161286e565b169181338414159182612496575b82612428575b50506123ff5781600052606f815260406000205480600103600181116123d157837f81d714ca01079a19c106993b49b2764df6bb6abe740164ef7b77ee9c100a024a949550600052606f835260406000205560405190158152a2005b6011857f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b826040517fc22a648e000000000000000000000000000000000000000000000000000000008152fd5b60249250606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233898301525afa90811561046957600091612479575b50158185612375565b6124909150823d841161046257610454818361291b565b84612470565b91505033600052606e825281600160406000205414159161236f565b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576124e961286e565b6124f1612891565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526070602052604060002091166000526020526020604060002054604051908152f35b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35773ffffffffffffffffffffffffffffffffffffffff61257b61286e565b16600052606f6020526020604060002054604051908152f35b346101a35760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576125cb61286e565b906125d4612891565b906044359273ffffffffffffffffffffffffffffffffffffffff916024602084606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233878301525afa9081156104695760009161267d575b5015611d0d5750817ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648926020921693612672868287612d77565b6040519586521693a3005b612695915060203d811161046257610454818361291b565b86612638565b346101a35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a35780359073ffffffffffffffffffffffffffffffffffffffff6024602082606a5416604051928380927f521d4de900000000000000000000000000000000000000000000000000000000825233888301525afa9081156104695760009161276a575b50156109af57606b5416610987577f39bb629f3d59f5eddf978050e1f5fabeca2b5d02dfc9c25e84f32e7da1069db460208380606c55604051908152a1005b612782915060203d811161046257610454818361291b565b8461272b565b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576127bf61286e565b6127c7612891565b9073ffffffffffffffffffffffffffffffffffffffff809116600052606d6020526040600020911660005260205260606040600020600181549101546040519179ffffffffffffffffffffffffffffffffffffffffffffffffffff8116835260d01c60208301526040820152f35b346101a35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357602090606c548152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101a357565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036101a357565b6040810190811067ffffffffffffffff8211176128d057604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176128d057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176128d057604052565b67ffffffffffffffff81116128d057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926129a28261295c565b916129b0604051938461291b565b8294818452818301116101a3578281602093846000960137010152565b9181601f840112156101a35782359167ffffffffffffffff83116101a3576020808501948460051b0101116101a357565b15612a0557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15612a9057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15612b7c5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15612c2b573d90612c118261295c565b91612c1f604051938461291b565b82523d6000602084013e565b606090565b909160609115612c3f57505090565b612c4a919392612cb2565b565b60208082528251818301819052939260005b858110612c9e575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201612c5e565b805190925015612cc55750805190602001fd5b612cfb906040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301612c4c565b0390fd5b908160209103126101a3575180151581036101a35790565b9190811015612d275760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101a35790565b9173ffffffffffffffffffffffffffffffffffffffff604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff8411176128d057612c4a926040525b604051612e519173ffffffffffffffffffffffffffffffffffffffff16612e0c826128b4565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1612e4b612c00565b91612efa565b80519081612e5e57505050565b8280612e6e938301019101612cff565b15612e765750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919260609115612f78575050815115612f11575090565b3b15612f1a5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909392612c4a9250612cb2565b606b5465ffffffffffff8160a01c164210159081612fb0575b5015612faa5760655490565b60675490565b73ffffffffffffffffffffffffffffffffffffffff9150161538612f9e565b90610e1065ffffffffffff80931602918216918203612fea57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f23aa2e4f757a7bd974085d3e11439a843b137b30905e3ffd51b2097c34aef62e6020604051613048816128b4565b6067549081815260685492839101527fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff606b5416606b5580606555816066557f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee6600080a16130eb6130c4610e1065ffffffffffff421604612fcf565b6040519384938491604091949365ffffffffffff9160608501968552602085015216910152565b0390a1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff80921601818111612fea5781610e108160019316041601818111612fea5781606b5460d01c911601908111612fea5761315090612fcf565b90565b8051821015612d275760209160051b01019056fea26469706673582212204bc7c5ce91f161796c008fa7cc197fa667e89433ebbad74f961f82a7ff3d5b7964736f6c63430008110033",
  "devdoc": {
    "author": "Angle Labs. Inc",
    "kind": "dev",
    "methods": {
      "claim(address[],address[],uint256[],bytes32[][])": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of who provides the proof and pays the gas: `msg.sender` is used only for addresses that require a trusted operator",
        "params": {
          "amounts": "Amount of tokens that will be sent to the corresponding users",
          "proofs": "Array of hashes bridging from a leaf `(hash of user | token | amount)` to the Merkle root",
          "tokens": "ERC20 claimed",
          "users": "Recipient of tokens"
        }
      },
      "disputeTree(string)": {
        "details": "Requires a deposit of `disputeToken` that'll be slashed if the dispute is not acceptedIt is only possible to create a dispute within `disputePeriod` after each tree update"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "resolveDispute(bool)": {
        "params": {
          "valid": "Whether the dispute was valid"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "disputer": {
        "details": "Used to store if there is an ongoing dispute"
      }
    },
    "title": "Distributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canUpdateMerkleRoot(address)": {
        "notice": "Trusted EOAs to update the Merkle root"
      },
      "claim(address[],address[],uint256[],bytes32[][])": {
        "notice": "Claims rewards for a given set of users"
      },
      "claimed(address,address)": {
        "notice": "Mapping user -> token -> amount to track claimed amounts"
      },
      "core()": {
        "notice": "`Core` contract handling access control"
      },
      "disputeAmount()": {
        "notice": "Amount to deposit to freeze the roots update"
      },
      "disputePeriod()": {
        "notice": "Time after which a change in a tree becomes effective, in EPOCH_DURATION"
      },
      "disputeToken()": {
        "notice": "Token to deposit to freeze the roots update"
      },
      "disputeTree(string)": {
        "notice": "Freezes the Merkle tree update until the dispute is resolved"
      },
      "disputer()": {
        "notice": "Address which created the dispute"
      },
      "endOfDisputePeriod()": {
        "notice": "When the current tree will become valid"
      },
      "getMerkleRoot()": {
        "notice": "Returns the MerkleRoot that is currently live for the contract"
      },
      "lastTree()": {
        "notice": "Tree that was in place in the contract before the last `tree` update"
      },
      "onlyOperatorCanClaim(address)": {
        "notice": "Whether or not to disable permissionless claiming"
      },
      "operators(address,address)": {
        "notice": "user -> operator -> authorisation to claim"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Recovers any ERC20 token"
      },
      "resolveDispute(bool)": {
        "notice": "Resolve the ongoing dispute, if any"
      },
      "revokeTree()": {
        "notice": "Allows the governor or the guardian of this contract to fallback to the last version of the tree immediately"
      },
      "setDisputeAmount(uint256)": {
        "notice": "Sets the amount of `disputeToken` used as a caution during disputes"
      },
      "setDisputePeriod(uint48)": {
        "notice": "Sets the dispute period after which a tree update becomes effective"
      },
      "setDisputeToken(address)": {
        "notice": "Sets the token used as a caution during disputes"
      },
      "toggleOnlyOperatorCanClaim(address)": {
        "notice": "Toggles permissioned claiming for a given user"
      },
      "toggleOperator(address,address)": {
        "notice": "Toggles whitelisting for a given user and a given operator"
      },
      "toggleTrusted(address)": {
        "notice": "Adds or removes EOAs which are trusted to update the Merkle root"
      },
      "tree()": {
        "notice": "Tree of claimable tokens through this contract"
      },
      "updateTree((bytes32,bytes32))": {
        "notice": "Updates Merkle Tree"
      }
    },
    "notice": "Allows LPs on AMMs with concentrated liquidity to claim the rewards that were distributed to them",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 398,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 377,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 692,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9137,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "tree",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(MerkleTree)9115_storage"
      },
      {
        "astId": 9141,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "lastTree",
        "offset": 0,
        "slot": "103",
        "type": "t_struct(MerkleTree)9115_storage"
      },
      {
        "astId": 9145,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputeToken",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)3433"
      },
      {
        "astId": 9149,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "core",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ICore)11750"
      },
      {
        "astId": 9152,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputer",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 9155,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "endOfDisputePeriod",
        "offset": 20,
        "slot": "107",
        "type": "t_uint48"
      },
      {
        "astId": 9158,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputePeriod",
        "offset": 26,
        "slot": "107",
        "type": "t_uint48"
      },
      {
        "astId": 9161,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputeAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 9169,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "claimed",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Claim)9122_storage))"
      },
      {
        "astId": 9174,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "canUpdateMerkleRoot",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9179,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "onlyOperatorCanClaim",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9186,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "operators",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9190,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "__gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)38_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)38_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[38]",
        "numberOfBytes": "1216"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICore)11750": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3433": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Claim)9122_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Claim))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Claim)9122_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Claim)9122_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)9122_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Claim)9122_storage": {
        "encoding": "inplace",
        "label": "struct Claim",
        "members": [
          {
            "astId": 9117,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 9119,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "timestamp",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9121,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MerkleTree)9115_storage": {
        "encoding": "inplace",
        "label": "struct MerkleTree",
        "members": [
          {
            "astId": 9112,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9114,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}