{
  "address": "0xF9969CC40bF698640C2D9147Ea6A01D5EC8e2bB0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTrusted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnresolvedDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_disputeAmount",
          "type": "uint256"
        }
      ],
      "name": "DisputeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "_disputePeriod",
          "type": "uint48"
        }
      ],
      "name": "DisputePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_disputeToken",
          "type": "address"
        }
      ],
      "name": "DisputeTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Disputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "OperatorClaimingToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "OperatorToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "TreeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trust",
          "type": "bool"
        }
      ],
      "name": "TrustedToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canUpdateMerkleRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreBorrow",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputePeriod",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "disputeTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_coreBorrow",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTree",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTreeUpdate",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "onlyOperatorCanClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeAmount",
          "type": "uint256"
        }
      ],
      "name": "setDisputeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_disputePeriod",
          "type": "uint48"
        }
      ],
      "name": "setDisputePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_disputeToken",
          "type": "address"
        }
      ],
      "name": "setDisputeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "toggleOnlyOperatorCanClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "toggleOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        }
      ],
      "name": "toggleTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tree",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ipfsHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MerkleTree",
          "name": "_tree",
          "type": "tuple"
        }
      ],
      "name": "updateTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d5823c1f173264fc51e987b00d3498ade7b3754791df45dc71d14f8e9805a6d",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xF9969CC40bF698640C2D9147Ea6A01D5EC8e2bB0",
    "transactionIndex": 41,
    "gasUsed": "1990839",
    "logsBloom": "0x
    "blockHash": "0x6c61fc44daf1cb9cb29cf13c240f20d660d2816084e1cf32248f393b4c6dfc85",
    "transactionHash": "0x0d5823c1f173264fc51e987b00d3498ade7b3754791df45dc71d14f8e9805a6d",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 38983652,
        "transactionHash": "0x0d5823c1f173264fc51e987b00d3498ade7b3754791df45dc71d14f8e9805a6d",
        "address": "0xF9969CC40bF698640C2D9147Ea6A01D5EC8e2bB0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 415,
        "blockHash": "0x6c61fc44daf1cb9cb29cf13c240f20d660d2816084e1cf32248f393b4c6dfc85"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 38983652,
        "transactionHash": "0x0d5823c1f173264fc51e987b00d3498ade7b3754791df45dc71d14f8e9805a6d",
        "address": "0xF9969CC40bF698640C2D9147Ea6A01D5EC8e2bB0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 416,
        "blockHash": "0x6c61fc44daf1cb9cb29cf13c240f20d660d2816084e1cf32248f393b4c6dfc85"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 38983652,
        "transactionHash": "0x0d5823c1f173264fc51e987b00d3498ade7b3754791df45dc71d14f8e9805a6d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e6c3a171cdde4d0000000000000000000000000000000000000000000000021f4717a43628d333000000000000000000000000000000000000000000000013ecbe41ee302f8c240000000000000000000000000000000000000000000000021e605402c45af4e6000000000000000000000000000000000000000000000013eda5058fa1fd6a71",
        "logIndex": 417,
        "blockHash": "0x6c61fc44daf1cb9cb29cf13c240f20d660d2816084e1cf32248f393b4c6dfc85"
      }
    ],
    "blockNumber": 38983652,
    "cumulativeGasUsed": "19392687",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "312b8989ee6f0cb7f5e1f69c03daeea8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnresolvedDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeAmount\",\"type\":\"uint256\"}],\"name\":\"DisputeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"_disputePeriod\",\"type\":\"uint48\"}],\"name\":\"DisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_disputeToken\",\"type\":\"address\"}],\"name\":\"DisputeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Disputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"OperatorClaimingToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"OperatorToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"TreeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trust\",\"type\":\"bool\"}],\"name\":\"TrustedToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canUpdateMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreBorrow\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputePeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"disputeTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_coreBorrow\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTreeUpdate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onlyOperatorCanClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeAmount\",\"type\":\"uint256\"}],\"name\":\"setDisputeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_disputePeriod\",\"type\":\"uint48\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_disputeToken\",\"type\":\"address\"}],\"name\":\"setDisputeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"toggleOnlyOperatorCanClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"toggleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"}],\"name\":\"toggleTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MerkleTree\",\"name\":\"_tree\",\"type\":\"tuple\"}],\"name\":\"updateTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs. Inc\",\"details\":\"This contract relies on whitelisted or Angle-governance controlled addresses to update the Merkle root for reward distribution. After each tree update, there is a dispute period, during which it is possible to fallback to the old version of the Merkle root\",\"kind\":\"dev\",\"methods\":{\"claim(address[],address[],uint256[],bytes32[][])\":{\"details\":\"Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of who provides the proof and pays the gas: `msg.sender` is used only for addresses that require a trusted operator\",\"params\":{\"amounts\":\"Amount of tokens that will be sent to the corresponding users\",\"proofs\":\"Array of hashes bridging from leaf (hash of user | token | amount) to Merkle root\",\"tokens\":\"ERC20 claimed\",\"users\":\"Recipient of tokens\"}},\"disputeTree(string)\":{\"details\":\"Requires a deposit of `disputeToken` that'll be slashed if the dispute is not acceptedIt is only possible to create a dispute for `disputePeriod` after each tree update\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"resolveDispute(bool)\":{\"params\":{\"valid\":\"Whether the dispute was valid\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"disputer\":{\"details\":\"Used to store if there is an ongoing dispute\"}},\"title\":\"Distributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canUpdateMerkleRoot(address)\":{\"notice\":\"Trusted EOAs to update the Merkle root\"},\"claim(address[],address[],uint256[],bytes32[][])\":{\"notice\":\"Claims rewards for a given set of users\"},\"claimed(address,address)\":{\"notice\":\"Mapping user -> token -> amount to track claimed amounts\"},\"coreBorrow()\":{\"notice\":\"`CoreBorrow` contract handling access control\"},\"disputeAmount()\":{\"notice\":\"Amount to deposit to freeze the roots update\"},\"disputePeriod()\":{\"notice\":\"Time before which a change in a tree becomes effective\"},\"disputeToken()\":{\"notice\":\"Token to deposit to freeze the roots update\"},\"disputeTree(string)\":{\"notice\":\"Freezes the Merkle tree update until the dispute is resolved\"},\"disputer()\":{\"notice\":\"Address which created the dispute\"},\"getMerkleRoot()\":{\"notice\":\"Returns the MerkleRoot that is currently live for the contract\"},\"lastTree()\":{\"notice\":\"Tree that was in place in the contract before the last `tree` update\"},\"lastTreeUpdate()\":{\"notice\":\"Last time the `tree` was updated\"},\"onlyOperatorCanClaim(address)\":{\"notice\":\"Whether or not to disable permissionless claiming\"},\"operators(address,address)\":{\"notice\":\"user -> operator -> authorisation to claim\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Recovers any ERC20 token\"},\"resolveDispute(bool)\":{\"notice\":\"Resolve the ongoing dispute, if any\"},\"revokeTree()\":{\"notice\":\"Allows the governor or the guardian of this contract to fallback to the last version of the tree immediately\"},\"setDisputeAmount(uint256)\":{\"notice\":\"Sets the amount of `disputeToken` used as a caution during disputes\"},\"setDisputePeriod(uint48)\":{\"notice\":\"Sets the dispute period before which a tree update becomes effective\"},\"setDisputeToken(address)\":{\"notice\":\"Sets the token used as a caution during disputes\"},\"toggleOnlyOperatorCanClaim(address)\":{\"notice\":\"Toggles permissioned claiming for a given user\"},\"toggleOperator(address,address)\":{\"notice\":\"Toggles whitelisting for a given user and a given operator\"},\"toggleTrusted(address)\":{\"notice\":\"Adds or removes EOAs which are trusted to update the Merkle root\"},\"tree()\":{\"notice\":\"Tree of claimable tokens through this contract\"},\"updateTree((bytes32,bytes32))\":{\"notice\":\"Updates Merkle Tree\"}},\"notice\":\"Allows AMMs LPs to claim the rewards that were distributed to them\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Distributor.sol\":\"Distributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Distributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./utils/UUPSHelper.sol\\\";\\n\\nstruct MerkleTree {\\n    // Root of a Merkle tree which leaves are (address user, address token, uint amount)\\n    // representing an amount of tokens owed to user.\\n    // The Merkle tree is assumed to have only increasing amounts: that is to say if a user can claim 1,\\n    // then after the amount associated in the Merkle tree for this token should be x > 1\\n    bytes32 merkleRoot;\\n    // Ipfs hash of the tree data\\n    bytes32 ipfsHash;\\n}\\n\\n/// @title Distributor\\n/// @notice Allows AMMs LPs to claim the rewards that were distributed to them\\n/// @author Angle Labs. Inc\\n/// @dev This contract relies on whitelisted or Angle-governance controlled addresses to update the Merkle root\\n/// for reward distribution. After each tree update, there is a dispute period, during which it is possible to\\n/// fallback to the old version of the Merkle root\\ncontract Distributor is UUPSHelper {\\n    using SafeERC20 for IERC20;\\n\\n    // ================================= VARIABLES =================================\\n\\n    /// @notice Tree of claimable tokens through this contract\\n    MerkleTree public tree;\\n\\n    /// @notice Tree that was in place in the contract before the last `tree` update\\n    MerkleTree public lastTree;\\n\\n    /// @notice Token to deposit to freeze the roots update\\n    IERC20 public disputeToken;\\n\\n    /// @notice `CoreBorrow` contract handling access control\\n    ICoreBorrow public coreBorrow;\\n\\n    /// @notice Address which created the dispute\\n    /// @dev Used to store if there is an ongoing dispute\\n    address public disputer;\\n\\n    /// @notice Last time the `tree` was updated\\n    uint48 public lastTreeUpdate;\\n\\n    /// @notice Time before which a change in a tree becomes effective\\n    uint48 public disputePeriod;\\n\\n    /// @notice Amount to deposit to freeze the roots update\\n    uint256 public disputeAmount;\\n\\n    /// @notice Mapping user -> token -> amount to track claimed amounts\\n    mapping(address => mapping(address => uint256)) public claimed;\\n\\n    /// @notice Trusted EOAs to update the Merkle root\\n    mapping(address => uint256) public canUpdateMerkleRoot;\\n\\n    /// @notice Whether or not to disable permissionless claiming\\n    mapping(address => uint256) public onlyOperatorCanClaim;\\n\\n    /// @notice user -> operator -> authorisation to claim\\n    mapping(address => mapping(address => uint256)) public operators;\\n\\n    uint256[38] private __gap;\\n\\n    // =================================== EVENTS ==================================\\n\\n    event Claimed(address user, address token, uint256 amount);\\n    event Disputed(string reason);\\n    event DisputePeriodUpdated(uint48 _disputePeriod);\\n    event DisputeTokenUpdated(address indexed _disputeToken);\\n    event DisputeAmountUpdated(uint256 _disputeAmount);\\n    event DisputeResolved(bool valid);\\n    event OperatorClaimingToggled(address user, bool isEnabled);\\n    event OperatorToggled(address user, address operator, bool isWhitelisted);\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n    event TreeUpdated(bytes32 merkleRoot, bytes32 ipfsHash);\\n    event TrustedToggled(address indexed eoa, bool trust);\\n\\n    // ================================= MODIFIERS =================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!coreBorrow.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    /// @notice Checks whether the `msg.sender` is the `user` address or is a trusted address\\n    modifier onlyTrustedOrUser(address user) {\\n        if (user != msg.sender && canUpdateMerkleRoot[msg.sender] != 1 && !coreBorrow.isGovernorOrGuardian(msg.sender))\\n            revert NotTrusted();\\n        _;\\n    }\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    constructor() initializer {}\\n\\n    function initialize(ICoreBorrow _coreBorrow) external initializer {\\n        if (address(_coreBorrow) == address(0)) revert ZeroAddress();\\n        coreBorrow = _coreBorrow;\\n    }\\n\\n    /// @inheritdoc UUPSUpgradeable\\n    function _authorizeUpgrade(address) internal view override onlyGuardianUpgrader(coreBorrow) {}\\n\\n    // =============================== MAIN FUNCTION ===============================\\n\\n    /// @notice Claims rewards for a given set of users\\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\\n    /// who provides the proof and pays the gas: `msg.sender` is used only for addresses that require a trusted operator\\n    /// @param users Recipient of tokens\\n    /// @param tokens ERC20 claimed\\n    /// @param amounts Amount of tokens that will be sent to the corresponding users\\n    /// @param proofs Array of hashes bridging from leaf (hash of user | token | amount) to Merkle root\\n    function claim(\\n        address[] calldata users,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        uint256 usersLength = users.length;\\n        if (\\n            usersLength == 0 ||\\n            usersLength != tokens.length ||\\n            usersLength != amounts.length ||\\n            usersLength != proofs.length\\n        ) revert InvalidLengths();\\n\\n        for (uint256 i; i < usersLength; ) {\\n            address user = users[i];\\n            address token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            // Checking if only an approved operator can claim for `user`\\n            if (onlyOperatorCanClaim[user] == 1 && operators[user][msg.sender] == 0) revert NotWhitelisted();\\n\\n            // Verifying proof\\n            bytes32 leaf = keccak256(abi.encode(user, token, amount));\\n            if (!_verifyProof(leaf, proofs[i])) revert InvalidProof();\\n\\n            // Closing reentrancy gate here\\n            uint256 toSend = amount - claimed[user][token];\\n            claimed[user][token] = amount;\\n\\n            IERC20(token).safeTransfer(user, toSend);\\n            emit Claimed(user, token, toSend);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the MerkleRoot that is currently live for the contract\\n    function getMerkleRoot() public view returns (bytes32) {\\n        if (block.timestamp - lastTreeUpdate >= disputePeriod) return tree.merkleRoot;\\n        else return lastTree.merkleRoot;\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTIONS ===========================\\n\\n    /// @notice Adds or removes EOAs which are trusted to update the Merkle root\\n    function toggleTrusted(address eoa) external onlyGovernorOrGuardian {\\n        uint256 trustedStatus = 1 - canUpdateMerkleRoot[eoa];\\n        canUpdateMerkleRoot[eoa] = trustedStatus;\\n        emit TrustedToggled(eoa, trustedStatus == 1);\\n    }\\n\\n    /// @notice Updates Merkle Tree\\n    function updateTree(MerkleTree calldata _tree) external {\\n        if (\\n            disputer != address(0) ||\\n            // A trusted address cannot update a tree right after a precedent tree update otherwise it can de facto\\n            // validate a tree which has not passed the dispute period\\n            ((canUpdateMerkleRoot[msg.sender] != 1 || block.timestamp - lastTreeUpdate < disputePeriod) &&\\n                !coreBorrow.isGovernorOrGuardian(msg.sender))\\n        ) revert NotTrusted();\\n        MerkleTree memory _lastTree = tree;\\n        tree = _tree;\\n        lastTree = _lastTree;\\n        lastTreeUpdate = uint48(block.timestamp);\\n        emit TreeUpdated(_tree.merkleRoot, _tree.ipfsHash);\\n    }\\n\\n    /// @notice Freezes the Merkle tree update until the dispute is resolved\\n    /// @dev Requires a deposit of `disputeToken` that'll be slashed if the dispute is not accepted\\n    /// @dev It is only possible to create a dispute for `disputePeriod` after each tree update\\n    function disputeTree(string memory reason) external {\\n        if (block.timestamp - lastTreeUpdate >= disputePeriod) revert InvalidDispute();\\n        IERC20(disputeToken).safeTransferFrom(msg.sender, address(this), disputeAmount);\\n        disputer = msg.sender;\\n        emit Disputed(reason);\\n    }\\n\\n    /// @notice Resolve the ongoing dispute, if any\\n    /// @param valid Whether the dispute was valid\\n    function resolveDispute(bool valid) external onlyGovernorOrGuardian {\\n        if (disputer == address(0)) revert NoDispute();\\n        if (valid) {\\n            IERC20(disputeToken).safeTransfer(disputer, disputeAmount);\\n            // If a dispute is valid, the contract falls back to the last tree that was updated\\n            _revokeTree();\\n        } else {\\n            IERC20(disputeToken).safeTransfer(msg.sender, disputeAmount);\\n            lastTreeUpdate = uint48(block.timestamp);\\n        }\\n        disputer = address(0);\\n        emit DisputeResolved(valid);\\n    }\\n\\n    /// @notice Allows the governor or the guardian of this contract to fallback to the last version of the tree\\n    /// immediately\\n    function revokeTree() external onlyGovernorOrGuardian {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        _revokeTree();\\n    }\\n\\n    /// @notice Toggles permissioned claiming for a given user\\n    function toggleOnlyOperatorCanClaim(address user) external onlyTrustedOrUser(user) {\\n        onlyOperatorCanClaim[user] = 1 - onlyOperatorCanClaim[user];\\n        emit OperatorClaimingToggled(user, onlyOperatorCanClaim[user] == 1);\\n    }\\n\\n    /// @notice Toggles whitelisting for a given user and a given operator\\n    function toggleOperator(address user, address operator) external onlyTrustedOrUser(user) {\\n        operators[user][operator] = 1 - operators[user][operator];\\n        emit OperatorToggled(user, operator, operators[user][operator] == 1);\\n    }\\n\\n    /// @notice Recovers any ERC20 token\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amountToRecover\\n    ) external onlyGovernorOrGuardian {\\n        IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Sets the dispute period before which a tree update becomes effective\\n    function setDisputePeriod(uint48 _disputePeriod) external onlyGovernorOrGuardian {\\n        if (_disputePeriod > block.timestamp) revert InvalidParam();\\n        disputePeriod = uint48(_disputePeriod);\\n        emit DisputePeriodUpdated(_disputePeriod);\\n    }\\n\\n    /// @notice Sets the token used as a caution during disputes\\n    function setDisputeToken(IERC20 _disputeToken) external onlyGovernorOrGuardian {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        disputeToken = _disputeToken;\\n        emit DisputeTokenUpdated(address(_disputeToken));\\n    }\\n\\n    /// @notice Sets the amount of `disputeToken` used as a caution during disputes\\n    function setDisputeAmount(uint256 _disputeAmount) external onlyGovernorOrGuardian {\\n        if (disputer != address(0)) revert UnresolvedDispute();\\n        disputeAmount = _disputeAmount;\\n        emit DisputeAmountUpdated(_disputeAmount);\\n    }\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Fallback to the last version of the tree\\n    function _revokeTree() internal {\\n        MerkleTree memory _tree = lastTree;\\n        lastTreeUpdate = 0;\\n        tree = _tree;\\n        emit TreeUpdated(_tree.merkleRoot, _tree.ipfsHash);\\n    }\\n\\n    /// @notice Checks the validity of a proof\\n    /// @param leaf Hashed leaf data, the starting point of the proof\\n    /// @param proof Array of hashes forming a hash chain from leaf to root\\n    /// @return true If proof is correct, else false\\n    function _verifyProof(bytes32 leaf, bytes32[] memory proof) internal view returns (bool) {\\n        bytes32 currentHash = leaf;\\n        uint256 proofLength = proof.length;\\n        for (uint256 i; i < proofLength; ) {\\n            if (currentHash < proof[i]) {\\n                currentHash = keccak256(abi.encode(currentHash, proof[i]));\\n            } else {\\n                currentHash = keccak256(abi.encode(proof[i], currentHash));\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return currentHash == getMerkleRoot();\\n    }\\n}\\n\",\"keccak256\":\"0x3400a19e5ebbed881b2974a36843cab3b0016ad5958065f23ff582a021340601\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c77e5d60f7423bee265e9b1986d6c1ae461d231a1ceb9b86cb4146db4f51687\",\"license\":\"GPL-3.0\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nerror InvalidDispute();\\nerror InvalidLengths();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidProof();\\nerror InvalidReward();\\nerror InvalidSignature();\\nerror NoDispute();\\nerror NotGovernor();\\nerror NotGovernorOrGuardian();\\nerror NotSigned();\\nerror NotTrusted();\\nerror NotWhitelisted();\\nerror UnresolvedDispute();\\nerror ZeroAddress();\\n\",\"keccak256\":\"0x1c0e062d80d6dee8d3a19bed2c83919b58ef15df0ac11ff04dae57eb6481cd96\",\"license\":\"GPL-3.0\"},\"contracts/utils/UUPSHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\n/// @title UUPSHelper\\n/// @notice Helper contract for UUPSUpgradeable contracts where the upgradeability is controlled by a specific address\\n/// @author Angle Labs., Inc\\n/// @dev The 0 address check in the modifier allows the use of these modifiers during initalization\\nabstract contract UUPSHelper is UUPSUpgradeable {\\n    modifier onlyGuardianUpgrader(ICoreBorrow _coreBorrow) {\\n        if (address(_coreBorrow) != address(0) && !_coreBorrow.isGovernorOrGuardian(msg.sender))\\n            revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    modifier onlyGovernorUpgrader(ICoreBorrow _coreBorrow) {\\n        if (address(_coreBorrow) != address(0) && !_coreBorrow.isGovernor(msg.sender)) revert NotGovernor();\\n        _;\\n    }\\n\\n    constructor() initializer {}\\n}\\n\",\"keccak256\":\"0xd5680603ba974a64fa3adbf866f4fbf7d376cfc861bbc7a3d568f6421c744f5e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234620000495730608052620000186200004e565b620000226200004e565b60405161229f90816200015a8239608051818181610ebc01528181610fc801526114760152f35b600080fd5b60005460ff8160081c1615908180926200014b575b801562000132575b15620000d65760ff19811660011760005581620000c3575b506200008b57565b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1565b61ffff1916610101176000553862000083565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156200006b5750600160ff8216146200006b565b50600160ff8216106200006356fe608080604052600436101561001357600080fd5b60003560e01c90816309454ba314611c3b575080630c9cbf0e14611be95780630d10fca314611b3f5780631171bda914611a7e5780631476914214611a445780631b0c24d514611a1d5780632637588e146119cb57806328827838146118bc5780632a25dd411461177f5780633659cfe6146114515780634641fdef1461132757806349590657146113045780634f1ef28614610f7657806352d1902d14610ea15780635bf31d4d14610e805780635e549a0e14610e57578063623b9e9d14610d9b5780636ac5610314610d7457806371ee95c01461096c5780637ee843491461089d57806389e1e82a146107545780639578883514610680578063bdac7ca314610522578063c4d66de8146103ab578063c748d26114610384578063cce80e7a1461035f578063d9c98087146101c2578063e57480e5146101885763fd54b2281461015e57600080fd5b3461018357600036600319011261018357604060655460665482519182526020820152f35b600080fd5b34610183576020366003190112610183576001600160a01b036101a9611c56565b16600052606e6020526020604060002054604051908152f35b3461018357604036600319011261018357606b546001600160a01b03808216159081159161029e575b5061027457604060207f39f3c4d5c2bbcbf0e3945f22aa618f4e654952eaafcdaa119f0ef12dfce4f2f39282519061022282611c82565b6065549182815260665493849101526004359283606555602435928360665560675560685565ffffffffffff60a01b1965ffffffffffff60a01b4260a01b16911617606b5582519182526020820152a1005b60046040517fc22a648e000000000000000000000000000000000000000000000000000000008152fd5b905033600052606e6020526001604060002054149081159161033d575b816102c8575b50826101eb565b60249150602090606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610303575b5015826102c1565b610324915060203d811161032a575b61031c8183611cba565b810190611fb7565b826102fb565b503d610312565b6040513d6000823e3d90fd5b905061035465ffffffffffff8360a01c1642611ff3565b8260d01c11906102bb565b3461018357600036600319011261018357604060675460685482519182526020820152f35b346101835760003660031901126101835760206001600160a01b0360695416604051908152f35b34610183576020366003190112610183576004356001600160a01b038116809103610183576000549060ff8260081c161591828093610515575b80156104fe575b156104945760ff19811660011760005582610482575b508015610458576001600160a01b0319606a541617606a5561042057005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60046040517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b61ffff19166101011760005582610402565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156103ec5750600160ff8216146103ec565b50600160ff8216106103e5565b346101835760403660031901126101835761053b611c56565b610543611c6c565b906001600160a01b038091163381141580610667575b80610610575b610274578060005260209160708352604060002093169283600052825260406000205460010391600183116105fa577f42343f44c66ea1eaffa334760d3da2cb731d2a0b3b3e30423df997faa36cc95c936060938360005260708352604060002082600052835260406000205582600052607082526040600020816000528252600160406000205414916040519384528301526040820152a1005b634e487b7160e01b600052601160045260246000fd5b506024602083606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610649575b501561055f565b610661915060203d811161032a5761031c8183611cba565b84610642565b5033600052606e60205260016040600020541415610559565b34610183576000366003190112610183576001600160a01b036024602082606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610736575b501561070c57606b54166106e2576106e06121ef565b005b60046040517f05832574000000000000000000000000000000000000000000000000000000008152fd5b60046040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b61074e915060203d811161032a5761031c8183611cba565b826106ca565b346101835760203660031901126101835760043580151590818103610183576001600160a01b03916024602084606a54166040519283809263521d4de960e01b82523360048301525afa9081156103315760009161087f575b501561070c57606b8381541615610855577f8015c5005d9ad5d85ca80d3f894f08e0159277704c54166e5cff108800fa80cd936020931561081d57806107fe916069541690835416606c5491612000565b6108066121ef565b6001600160a01b03198154169055604051908152a1005b6108309060695416606c54903390612000565b805465ffffffffffff60a01b19164260a01b65ffffffffffff60a01b16178155610806565b60046040517f93754748000000000000000000000000000000000000000000000000000000008152fd5b610897915060203d811161032a5761031c8183611cba565b846107ad565b3461018357602080600319360112610183576108b7611c56565b6001600160a01b039060248383606a54166040519283809263521d4de960e01b82523360048301525afa9081156103315760009161094f575b501561070c57169081600052606e815260406000205460010390600182116105fa577f7628ea5f6112a16b36a8239aa208395a8e8f221688cfb3a5461faffb9700abcd9183600052606e825280604060002055600160405191148152a2005b6109669150843d861161032a5761031c8183611cba565b846108f0565b346101835760803660031901126101835760043567ffffffffffffffff81116101835761099d903690600401611d2f565b60243567ffffffffffffffff8111610183576109bd903690600401611d2f565b91909260443567ffffffffffffffff8111610183576109e0903690600401611d2f565b909160643567ffffffffffffffff811161018357610a02903690600401611d2f565b94909281158015610d6a575b8015610d60575b8015610d56575b610d2c5760005b828110610a2c57005b610a3f610a3a828587611fcf565b611fdf565b90610a4e610a3a828b8d611fcf565b610a5982858a611fcf565b35906001600160a01b038416600052606f60205260016040600020541480610d0e575b610ce457604080516001600160a01b03868116602083019081529084169282019290925260608082018590528152610ab5608082611cba565b5190208a841015610cce5760059084821b8a0135601e198b360301811215610183578a0180359267ffffffffffffffff84116101835783901b80360360208301136101835760405193610b0b6020830186611cba565b8452602084019036602082850101116101835760208301915b6020828501018310610cbe5750505050908051906000915b808310610c3f57505050610b4e6121c0565b03610c155783610c0c7ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683936001600160a01b0360019716600052610be2606d806020528460406000206001600160a01b0388169081600052602052610bb860406000205486611ff3565b9485936001600160a01b038416600052602052604060002082600052602052604060002055612000565b604051938493846040919493929460608201956001600160a01b0380921683521660208201520152565b0390a101610a23565b60046040517f09bde339000000000000000000000000000000000000000000000000000000008152fd5b909192600190610c4f8585612255565b51811015610c8c57610c618585612255565b516040519060208201928352604082015260408152610c7f81611c9e565b519020935b019190610b3c565b610c968585612255565b51906040519060208201928352604082015260408152610cb581611c9e565b51902093610c84565b8235815260209283019201610b24565b634e487b7160e01b600052603260045260246000fd5b60046040517f584a7938000000000000000000000000000000000000000000000000000000008152fd5b50607060205260406000203360005260205260406000205415610a7c565b60046040517f1df89e8b000000000000000000000000000000000000000000000000000000008152fd5b5085821415610a1c565b5080821415610a15565b5086821415610a0e565b346101835760003660031901126101835760206001600160a01b03606b5416604051908152f35b34610183576020366003190112610183576004356001600160a01b03808216809203610183576024602082606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610e39575b501561070c57606b54166106e257806001600160a01b031960695416176069557f1db8d6629941dcb63d5e0c927b89c174c714e139a4b9107a49de839d755f5d74600080a2005b610e51915060203d811161032a5761031c8183611cba565b83610df2565b3461018357600036600319011261018357602065ffffffffffff606b5460a01c16604051908152f35b34610183576000366003190112610183576020606b5460d01c604051908152f35b34610183576000366003190112610183576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f0c5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b604036600319011261018357610f8a611c56565b602490813567ffffffffffffffff8111610183573660238201121561018357610fbc9036908481600401359101611cf8565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691610ff583301415611d60565b6110247f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611dd1565b80606a54168581151591826112b0575b505061070c577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611071575050506106e09150611e42565b8391929316604051936352d1902d60e01b85526020948581600481865afa60009181611281575b5061110657608486602e896040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b95919293950361122c5761111983611e42565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2845115801590611224575b61115357005b823b156111d55750506000838192846106e096519201905af4611174611eef565b907f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051936111a385611c9e565b602785528401527f206661696c6564000000000000000000000000000000000000000000000000006040840152611f1f565b9060266084928562461bcd60e51b845260048401528201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152fd5b50600161114d565b8360296084926040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152fd5b9091508681813d83116112a9575b6112998183611cba565b8101031261018357519088611098565b503d61128f565b60209192506040519283809263521d4de960e01b82523360048301525afa908115610331576000916112e6575b50158587611034565b6112fe915060203d811161032a5761031c8183611cba565b866112dd565b3461018357600036600319011261018357602061131f6121c0565b604051908152f35b346101835760203660031901126101835760043565ffffffffffff81169081810361018357602460206001600160a01b03606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611433575b501561070c57428211611409577ffdf22e84af74bd4ab6b9646f6370a02bc886ed6ac25882db14e4ebf4b8e3bc7e9160209179ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff0000000000000000000000000000000000000000000000000000606b549260d01b16911617606b55604051908152a1005b60046040517fd2529034000000000000000000000000000000000000000000000000000000008152fd5b61144b915060203d811161032a5761031c8183611cba565b83611384565b34610183576020806003193601126101835761146b611c56565b6001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000166114a281301415611d60565b6114d17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614611dd1565b81606a541684811515918261172d575b505061070c57604051908482019282841067ffffffffffffffff85111761171757836040526000835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461154457505050506106e09150611e42565b8416906040516352d1902d60e01b81528681600481865afa600091816116e8575b506115d4576084876040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611692576115e284611e42565b604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061168a575b61161c57005b833b1561163a57506106e09392600092839251915af4611174611eef565b808562461bcd60e51b608493526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152fd5b506000611616565b6084856040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152fd5b9091508781813d8311611710575b6117008183611cba565b8101031261018357519088611565565b503d6116f6565b634e487b7160e01b600052604160045260246000fd5b602492506040519283809263521d4de960e01b82523360048301525afa90811561033157600091611762575b501584866114e1565b6117799150853d871161032a5761031c8183611cba565b85611759565b346101835760203660031901126101835760043567ffffffffffffffff81116101835736602382011215610183576117c1903690602481600401359101611cf8565b606b546117d965ffffffffffff8260a01c1642611ff3565b9060d01c111561189257606954606c546040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201523360248201523060448201526064808201929092529081527f5eca00b8ed745eee61451333090bfa56aa1f2a9e696a2aebe5f1f5b6cef6f2ff9261188d92909161186f916001600160a01b031661186a608483611cba565b612062565b336001600160a01b0319606b541617606b5560405191829182611f3b565b0390a1005b60046040517f1a8f0395000000000000000000000000000000000000000000000000000000008152fd5b3461018357602080600319360112610183576001600160a01b03806118df611c56565b1690823383141591826119af575b82611959575b50506102745780600052606f825260406000205460010390600182116105fa577f81d714ca01079a19c106993b49b2764df6bb6abe740164ef7b77ee9c100a024a9260409282600052606f825283600020556001836000205414908351928352820152a1005b60249250606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611992575b501582846118f3565b6119a99150833d851161032a5761031c8183611cba565b83611989565b91505033600052606e83528260016040600020541415916118ed565b34610183576040366003190112610183576119e4611c56565b6119ec611c6c565b906001600160a01b038091166000526070602052604060002091166000526020526020604060002054604051908152f35b346101835760003660031901126101835760206001600160a01b03606a5416604051908152f35b34610183576020366003190112610183576001600160a01b03611a65611c56565b16600052606f6020526020604060002054604051908152f35b3461018357606036600319011261018357611a97611c56565b611a9f611c6c565b604435916001600160a01b03906024602083606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611b21575b501561070c57817ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648926020921693611b16868287612000565b6040519586521693a3005b611b39915060203d811161032a5761031c8183611cba565b85611add565b34610183576020366003190112610183576004356001600160a01b036024602082606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611bcb575b501561070c57606b54166106e2576020817f39bb629f3d59f5eddf978050e1f5fabeca2b5d02dfc9c25e84f32e7da1069db492606c55604051908152a1005b611be3915060203d811161032a5761031c8183611cba565b83611b8c565b3461018357604036600319011261018357611c02611c56565b611c0a611c6c565b906001600160a01b03809116600052606d602052604060002091166000526020526020604060002054604051908152f35b3461018357600036600319011261018357602090606c548152f35b600435906001600160a01b038216820361018357565b602435906001600160a01b038216820361018357565b6040810190811067ffffffffffffffff82111761171757604052565b6060810190811067ffffffffffffffff82111761171757604052565b90601f8019910116810190811067ffffffffffffffff82111761171757604052565b67ffffffffffffffff811161171757601f01601f191660200190565b929192611d0482611cdc565b91611d126040519384611cba565b829481845281830111610183578281602093846000960137010152565b9181601f840112156101835782359167ffffffffffffffff8311610183576020808501948460051b01011161018357565b15611d6757565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15611dd857565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611e85576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611f1a573d90611f0082611cdc565b91611f0e6040519384611cba565b82523d6000602084013e565b606090565b909160609115611f2e57505090565b611f39919392611f84565b565b6020808252825181830181905290939260005b828110611f7057505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611f4e565b805190925015611f975750805190602001fd5b611fb39060405191829162461bcd60e51b835260048301611f3b565b0390fd5b90816020910312610183575180151581036101835790565b9190811015610cce5760051b0190565b356001600160a01b03811681036101835790565b919082039182116105fa57565b916001600160a01b03604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff84111761171757611f39926040525b6040516120c0916001600160a01b031661207b82611c82565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16120ba611eef565b9161214f565b805190816120cd57505050565b82806120dd938301019101611fb7565b156120e55750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9192606091156121b3575050815115612166575090565b3b1561216f5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909392611f399250611f84565b606b546121d865ffffffffffff8260a01c1642611ff3565b60d09190911c116121e95760655490565b60675490565b7f39f3c4d5c2bbcbf0e3945f22aa618f4e654952eaafcdaa119f0ef12dfce4f2f36040805161221d81611c82565b602060675491828152606854918291015265ffffffffffff60a01b19606b5416606b55816065558060665582519182526020820152a1565b8051821015610cce5760209160051b01019056fea2646970667358221220127fb7c2a2d774b92648feb68b42e895cf68cb412e458ec5db62e40919c5071464736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816309454ba314611c3b575080630c9cbf0e14611be95780630d10fca314611b3f5780631171bda914611a7e5780631476914214611a445780631b0c24d514611a1d5780632637588e146119cb57806328827838146118bc5780632a25dd411461177f5780633659cfe6146114515780634641fdef1461132757806349590657146113045780634f1ef28614610f7657806352d1902d14610ea15780635bf31d4d14610e805780635e549a0e14610e57578063623b9e9d14610d9b5780636ac5610314610d7457806371ee95c01461096c5780637ee843491461089d57806389e1e82a146107545780639578883514610680578063bdac7ca314610522578063c4d66de8146103ab578063c748d26114610384578063cce80e7a1461035f578063d9c98087146101c2578063e57480e5146101885763fd54b2281461015e57600080fd5b3461018357600036600319011261018357604060655460665482519182526020820152f35b600080fd5b34610183576020366003190112610183576001600160a01b036101a9611c56565b16600052606e6020526020604060002054604051908152f35b3461018357604036600319011261018357606b546001600160a01b03808216159081159161029e575b5061027457604060207f39f3c4d5c2bbcbf0e3945f22aa618f4e654952eaafcdaa119f0ef12dfce4f2f39282519061022282611c82565b6065549182815260665493849101526004359283606555602435928360665560675560685565ffffffffffff60a01b1965ffffffffffff60a01b4260a01b16911617606b5582519182526020820152a1005b60046040517fc22a648e000000000000000000000000000000000000000000000000000000008152fd5b905033600052606e6020526001604060002054149081159161033d575b816102c8575b50826101eb565b60249150602090606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610303575b5015826102c1565b610324915060203d811161032a575b61031c8183611cba565b810190611fb7565b826102fb565b503d610312565b6040513d6000823e3d90fd5b905061035465ffffffffffff8360a01c1642611ff3565b8260d01c11906102bb565b3461018357600036600319011261018357604060675460685482519182526020820152f35b346101835760003660031901126101835760206001600160a01b0360695416604051908152f35b34610183576020366003190112610183576004356001600160a01b038116809103610183576000549060ff8260081c161591828093610515575b80156104fe575b156104945760ff19811660011760005582610482575b508015610458576001600160a01b0319606a541617606a5561042057005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60046040517fd92e233d000000000000000000000000000000000000000000000000000000008152fd5b61ffff19166101011760005582610402565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156103ec5750600160ff8216146103ec565b50600160ff8216106103e5565b346101835760403660031901126101835761053b611c56565b610543611c6c565b906001600160a01b038091163381141580610667575b80610610575b610274578060005260209160708352604060002093169283600052825260406000205460010391600183116105fa577f42343f44c66ea1eaffa334760d3da2cb731d2a0b3b3e30423df997faa36cc95c936060938360005260708352604060002082600052835260406000205582600052607082526040600020816000528252600160406000205414916040519384528301526040820152a1005b634e487b7160e01b600052601160045260246000fd5b506024602083606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610649575b501561055f565b610661915060203d811161032a5761031c8183611cba565b84610642565b5033600052606e60205260016040600020541415610559565b34610183576000366003190112610183576001600160a01b036024602082606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610736575b501561070c57606b54166106e2576106e06121ef565b005b60046040517f05832574000000000000000000000000000000000000000000000000000000008152fd5b60046040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b61074e915060203d811161032a5761031c8183611cba565b826106ca565b346101835760203660031901126101835760043580151590818103610183576001600160a01b03916024602084606a54166040519283809263521d4de960e01b82523360048301525afa9081156103315760009161087f575b501561070c57606b8381541615610855577f8015c5005d9ad5d85ca80d3f894f08e0159277704c54166e5cff108800fa80cd936020931561081d57806107fe916069541690835416606c5491612000565b6108066121ef565b6001600160a01b03198154169055604051908152a1005b6108309060695416606c54903390612000565b805465ffffffffffff60a01b19164260a01b65ffffffffffff60a01b16178155610806565b60046040517f93754748000000000000000000000000000000000000000000000000000000008152fd5b610897915060203d811161032a5761031c8183611cba565b846107ad565b3461018357602080600319360112610183576108b7611c56565b6001600160a01b039060248383606a54166040519283809263521d4de960e01b82523360048301525afa9081156103315760009161094f575b501561070c57169081600052606e815260406000205460010390600182116105fa577f7628ea5f6112a16b36a8239aa208395a8e8f221688cfb3a5461faffb9700abcd9183600052606e825280604060002055600160405191148152a2005b6109669150843d861161032a5761031c8183611cba565b846108f0565b346101835760803660031901126101835760043567ffffffffffffffff81116101835761099d903690600401611d2f565b60243567ffffffffffffffff8111610183576109bd903690600401611d2f565b91909260443567ffffffffffffffff8111610183576109e0903690600401611d2f565b909160643567ffffffffffffffff811161018357610a02903690600401611d2f565b94909281158015610d6a575b8015610d60575b8015610d56575b610d2c5760005b828110610a2c57005b610a3f610a3a828587611fcf565b611fdf565b90610a4e610a3a828b8d611fcf565b610a5982858a611fcf565b35906001600160a01b038416600052606f60205260016040600020541480610d0e575b610ce457604080516001600160a01b03868116602083019081529084169282019290925260608082018590528152610ab5608082611cba565b5190208a841015610cce5760059084821b8a0135601e198b360301811215610183578a0180359267ffffffffffffffff84116101835783901b80360360208301136101835760405193610b0b6020830186611cba565b8452602084019036602082850101116101835760208301915b6020828501018310610cbe5750505050908051906000915b808310610c3f57505050610b4e6121c0565b03610c155783610c0c7ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683936001600160a01b0360019716600052610be2606d806020528460406000206001600160a01b0388169081600052602052610bb860406000205486611ff3565b9485936001600160a01b038416600052602052604060002082600052602052604060002055612000565b604051938493846040919493929460608201956001600160a01b0380921683521660208201520152565b0390a101610a23565b60046040517f09bde339000000000000000000000000000000000000000000000000000000008152fd5b909192600190610c4f8585612255565b51811015610c8c57610c618585612255565b516040519060208201928352604082015260408152610c7f81611c9e565b519020935b019190610b3c565b610c968585612255565b51906040519060208201928352604082015260408152610cb581611c9e565b51902093610c84565b8235815260209283019201610b24565b634e487b7160e01b600052603260045260246000fd5b60046040517f584a7938000000000000000000000000000000000000000000000000000000008152fd5b50607060205260406000203360005260205260406000205415610a7c565b60046040517f1df89e8b000000000000000000000000000000000000000000000000000000008152fd5b5085821415610a1c565b5080821415610a15565b5086821415610a0e565b346101835760003660031901126101835760206001600160a01b03606b5416604051908152f35b34610183576020366003190112610183576004356001600160a01b03808216809203610183576024602082606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091610e39575b501561070c57606b54166106e257806001600160a01b031960695416176069557f1db8d6629941dcb63d5e0c927b89c174c714e139a4b9107a49de839d755f5d74600080a2005b610e51915060203d811161032a5761031c8183611cba565b83610df2565b3461018357600036600319011261018357602065ffffffffffff606b5460a01c16604051908152f35b34610183576000366003190112610183576020606b5460d01c604051908152f35b34610183576000366003190112610183576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f0c5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b604036600319011261018357610f8a611c56565b602490813567ffffffffffffffff8111610183573660238201121561018357610fbc9036908481600401359101611cf8565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691610ff583301415611d60565b6110247f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611dd1565b80606a54168581151591826112b0575b505061070c577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611071575050506106e09150611e42565b8391929316604051936352d1902d60e01b85526020948581600481865afa60009181611281575b5061110657608486602e896040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b95919293950361122c5761111983611e42565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2845115801590611224575b61115357005b823b156111d55750506000838192846106e096519201905af4611174611eef565b907f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051936111a385611c9e565b602785528401527f206661696c6564000000000000000000000000000000000000000000000000006040840152611f1f565b9060266084928562461bcd60e51b845260048401528201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152fd5b50600161114d565b8360296084926040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152fd5b9091508681813d83116112a9575b6112998183611cba565b8101031261018357519088611098565b503d61128f565b60209192506040519283809263521d4de960e01b82523360048301525afa908115610331576000916112e6575b50158587611034565b6112fe915060203d811161032a5761031c8183611cba565b866112dd565b3461018357600036600319011261018357602061131f6121c0565b604051908152f35b346101835760203660031901126101835760043565ffffffffffff81169081810361018357602460206001600160a01b03606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611433575b501561070c57428211611409577ffdf22e84af74bd4ab6b9646f6370a02bc886ed6ac25882db14e4ebf4b8e3bc7e9160209179ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff0000000000000000000000000000000000000000000000000000606b549260d01b16911617606b55604051908152a1005b60046040517fd2529034000000000000000000000000000000000000000000000000000000008152fd5b61144b915060203d811161032a5761031c8183611cba565b83611384565b34610183576020806003193601126101835761146b611c56565b6001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000166114a281301415611d60565b6114d17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614611dd1565b81606a541684811515918261172d575b505061070c57604051908482019282841067ffffffffffffffff85111761171757836040526000835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461154457505050506106e09150611e42565b8416906040516352d1902d60e01b81528681600481865afa600091816116e8575b506115d4576084876040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611692576115e284611e42565b604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061168a575b61161c57005b833b1561163a57506106e09392600092839251915af4611174611eef565b808562461bcd60e51b608493526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152fd5b506000611616565b6084856040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152fd5b9091508781813d8311611710575b6117008183611cba565b8101031261018357519088611565565b503d6116f6565b634e487b7160e01b600052604160045260246000fd5b602492506040519283809263521d4de960e01b82523360048301525afa90811561033157600091611762575b501584866114e1565b6117799150853d871161032a5761031c8183611cba565b85611759565b346101835760203660031901126101835760043567ffffffffffffffff81116101835736602382011215610183576117c1903690602481600401359101611cf8565b606b546117d965ffffffffffff8260a01c1642611ff3565b9060d01c111561189257606954606c546040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201523360248201523060448201526064808201929092529081527f5eca00b8ed745eee61451333090bfa56aa1f2a9e696a2aebe5f1f5b6cef6f2ff9261188d92909161186f916001600160a01b031661186a608483611cba565b612062565b336001600160a01b0319606b541617606b5560405191829182611f3b565b0390a1005b60046040517f1a8f0395000000000000000000000000000000000000000000000000000000008152fd5b3461018357602080600319360112610183576001600160a01b03806118df611c56565b1690823383141591826119af575b82611959575b50506102745780600052606f825260406000205460010390600182116105fa577f81d714ca01079a19c106993b49b2764df6bb6abe740164ef7b77ee9c100a024a9260409282600052606f825283600020556001836000205414908351928352820152a1005b60249250606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611992575b501582846118f3565b6119a99150833d851161032a5761031c8183611cba565b83611989565b91505033600052606e83528260016040600020541415916118ed565b34610183576040366003190112610183576119e4611c56565b6119ec611c6c565b906001600160a01b038091166000526070602052604060002091166000526020526020604060002054604051908152f35b346101835760003660031901126101835760206001600160a01b03606a5416604051908152f35b34610183576020366003190112610183576001600160a01b03611a65611c56565b16600052606f6020526020604060002054604051908152f35b3461018357606036600319011261018357611a97611c56565b611a9f611c6c565b604435916001600160a01b03906024602083606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611b21575b501561070c57817ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648926020921693611b16868287612000565b6040519586521693a3005b611b39915060203d811161032a5761031c8183611cba565b85611add565b34610183576020366003190112610183576004356001600160a01b036024602082606a54166040519283809263521d4de960e01b82523360048301525afa90811561033157600091611bcb575b501561070c57606b54166106e2576020817f39bb629f3d59f5eddf978050e1f5fabeca2b5d02dfc9c25e84f32e7da1069db492606c55604051908152a1005b611be3915060203d811161032a5761031c8183611cba565b83611b8c565b3461018357604036600319011261018357611c02611c56565b611c0a611c6c565b906001600160a01b03809116600052606d602052604060002091166000526020526020604060002054604051908152f35b3461018357600036600319011261018357602090606c548152f35b600435906001600160a01b038216820361018357565b602435906001600160a01b038216820361018357565b6040810190811067ffffffffffffffff82111761171757604052565b6060810190811067ffffffffffffffff82111761171757604052565b90601f8019910116810190811067ffffffffffffffff82111761171757604052565b67ffffffffffffffff811161171757601f01601f191660200190565b929192611d0482611cdc565b91611d126040519384611cba565b829481845281830111610183578281602093846000960137010152565b9181601f840112156101835782359167ffffffffffffffff8311610183576020808501948460051b01011161018357565b15611d6757565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15611dd857565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611e85576001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91166001600160a01b0319825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611f1a573d90611f0082611cdc565b91611f0e6040519384611cba565b82523d6000602084013e565b606090565b909160609115611f2e57505090565b611f39919392611f84565b565b6020808252825181830181905290939260005b828110611f7057505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611f4e565b805190925015611f975750805190602001fd5b611fb39060405191829162461bcd60e51b835260048301611f3b565b0390fd5b90816020910312610183575180151581036101835790565b9190811015610cce5760051b0190565b356001600160a01b03811681036101835790565b919082039182116105fa57565b916001600160a01b03604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff84111761171757611f39926040525b6040516120c0916001600160a01b031661207b82611c82565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16120ba611eef565b9161214f565b805190816120cd57505050565b82806120dd938301019101611fb7565b156120e55750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9192606091156121b3575050815115612166575090565b3b1561216f5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909392611f399250611f84565b606b546121d865ffffffffffff8260a01c1642611ff3565b60d09190911c116121e95760655490565b60675490565b7f39f3c4d5c2bbcbf0e3945f22aa618f4e654952eaafcdaa119f0ef12dfce4f2f36040805161221d81611c82565b602060675491828152606854918291015265ffffffffffff60a01b19606b5416606b55816065558060665582519182526020820152a1565b8051821015610cce5760209160051b01019056fea2646970667358221220127fb7c2a2d774b92648feb68b42e895cf68cb412e458ec5db62e40919c5071464736f6c63430008110033",
  "devdoc": {
    "author": "Angle Labs. Inc",
    "details": "This contract relies on whitelisted or Angle-governance controlled addresses to update the Merkle root for reward distribution. After each tree update, there is a dispute period, during which it is possible to fallback to the old version of the Merkle root",
    "kind": "dev",
    "methods": {
      "claim(address[],address[],uint256[],bytes32[][])": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of who provides the proof and pays the gas: `msg.sender` is used only for addresses that require a trusted operator",
        "params": {
          "amounts": "Amount of tokens that will be sent to the corresponding users",
          "proofs": "Array of hashes bridging from leaf (hash of user | token | amount) to Merkle root",
          "tokens": "ERC20 claimed",
          "users": "Recipient of tokens"
        }
      },
      "disputeTree(string)": {
        "details": "Requires a deposit of `disputeToken` that'll be slashed if the dispute is not acceptedIt is only possible to create a dispute for `disputePeriod` after each tree update"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "resolveDispute(bool)": {
        "params": {
          "valid": "Whether the dispute was valid"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "disputer": {
        "details": "Used to store if there is an ongoing dispute"
      }
    },
    "title": "Distributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canUpdateMerkleRoot(address)": {
        "notice": "Trusted EOAs to update the Merkle root"
      },
      "claim(address[],address[],uint256[],bytes32[][])": {
        "notice": "Claims rewards for a given set of users"
      },
      "claimed(address,address)": {
        "notice": "Mapping user -> token -> amount to track claimed amounts"
      },
      "coreBorrow()": {
        "notice": "`CoreBorrow` contract handling access control"
      },
      "disputeAmount()": {
        "notice": "Amount to deposit to freeze the roots update"
      },
      "disputePeriod()": {
        "notice": "Time before which a change in a tree becomes effective"
      },
      "disputeToken()": {
        "notice": "Token to deposit to freeze the roots update"
      },
      "disputeTree(string)": {
        "notice": "Freezes the Merkle tree update until the dispute is resolved"
      },
      "disputer()": {
        "notice": "Address which created the dispute"
      },
      "getMerkleRoot()": {
        "notice": "Returns the MerkleRoot that is currently live for the contract"
      },
      "lastTree()": {
        "notice": "Tree that was in place in the contract before the last `tree` update"
      },
      "lastTreeUpdate()": {
        "notice": "Last time the `tree` was updated"
      },
      "onlyOperatorCanClaim(address)": {
        "notice": "Whether or not to disable permissionless claiming"
      },
      "operators(address,address)": {
        "notice": "user -> operator -> authorisation to claim"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Recovers any ERC20 token"
      },
      "resolveDispute(bool)": {
        "notice": "Resolve the ongoing dispute, if any"
      },
      "revokeTree()": {
        "notice": "Allows the governor or the guardian of this contract to fallback to the last version of the tree immediately"
      },
      "setDisputeAmount(uint256)": {
        "notice": "Sets the amount of `disputeToken` used as a caution during disputes"
      },
      "setDisputePeriod(uint48)": {
        "notice": "Sets the dispute period before which a tree update becomes effective"
      },
      "setDisputeToken(address)": {
        "notice": "Sets the token used as a caution during disputes"
      },
      "toggleOnlyOperatorCanClaim(address)": {
        "notice": "Toggles permissioned claiming for a given user"
      },
      "toggleOperator(address,address)": {
        "notice": "Toggles whitelisting for a given user and a given operator"
      },
      "toggleTrusted(address)": {
        "notice": "Adds or removes EOAs which are trusted to update the Merkle root"
      },
      "tree()": {
        "notice": "Tree of claimable tokens through this contract"
      },
      "updateTree((bytes32,bytes32))": {
        "notice": "Updates Merkle Tree"
      }
    },
    "notice": "Allows AMMs LPs to claim the rewards that were distributed to them",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 398,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 377,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 692,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7368,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "tree",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(MerkleTree)7357_storage"
      },
      {
        "astId": 7372,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "lastTree",
        "offset": 0,
        "slot": "103",
        "type": "t_struct(MerkleTree)7357_storage"
      },
      {
        "astId": 7376,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputeToken",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IERC20)3433"
      },
      {
        "astId": 7380,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "coreBorrow",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ICoreBorrow)9581"
      },
      {
        "astId": 7383,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputer",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 7386,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "lastTreeUpdate",
        "offset": 20,
        "slot": "107",
        "type": "t_uint48"
      },
      {
        "astId": 7389,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputePeriod",
        "offset": 26,
        "slot": "107",
        "type": "t_uint48"
      },
      {
        "astId": 7392,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "disputeAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 7399,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "claimed",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7404,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "canUpdateMerkleRoot",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7409,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "onlyOperatorCanClaim",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7416,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "operators",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7420,
        "contract": "contracts/Distributor.sol:Distributor",
        "label": "__gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)38_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)38_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[38]",
        "numberOfBytes": "1216"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICoreBorrow)9581": {
        "encoding": "inplace",
        "label": "contract ICoreBorrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3433": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MerkleTree)7357_storage": {
        "encoding": "inplace",
        "label": "struct MerkleTree",
        "members": [
          {
            "astId": 7354,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7356,
            "contract": "contracts/Distributor.sol:Distributor",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}