{
  "address": "0x5bc6BEf80DA563EBf6Df6D6913513fa9A7ec89BE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICore",
          "name": "_accessControlManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "angle",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeParams",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "rewardId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "uniV3Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "propToken0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "propToken1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "propFees",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "epochStart",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numEpoch",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "isOutOfRangeIncentivized",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "boostedReward",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "boostingAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "additionalData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merklDistributionCreator",
      "outputs": [
        {
          "internalType": "contract DistributionCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardWithTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAngleAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "rewardId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "wrapperTypes",
              "type": "uint32[]"
            },
            {
              "internalType": "uint32",
              "name": "propToken0",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "isOutOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "additionalData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DistributionParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44ebdbb3e81b056a6af6c81279bc7b16962c1fb0a84794dda4d8566077aefe5a",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x5bc6BEf80DA563EBf6Df6D6913513fa9A7ec89BE",
    "transactionIndex": 71,
    "gasUsed": "1818844",
    "logsBloom": "0x
    "blockHash": "0xe64432333f6b7aa2f6d59c77317fce1473820c77d417596179e4ec97bdfc24f0",
    "transactionHash": "0x44ebdbb3e81b056a6af6c81279bc7b16962c1fb0a84794dda4d8566077aefe5a",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 43322041,
        "transactionHash": "0x44ebdbb3e81b056a6af6c81279bc7b16962c1fb0a84794dda4d8566077aefe5a",
        "address": "0x900F717EA076E1E7a484ad9DD2dB81CEEc60eBF1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000005bc6bef80da563ebf6df6d6913513fa9a7ec89be",
          "0x0000000000000000000000008bb4c975ff3c250e0ceea271728547f3802b36fd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 418,
        "blockHash": "0xe64432333f6b7aa2f6d59c77317fce1473820c77d417596179e4ec97bdfc24f0"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 43322041,
        "transactionHash": "0x44ebdbb3e81b056a6af6c81279bc7b16962c1fb0a84794dda4d8566077aefe5a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a7be81eebe109000000000000000000000000000000000000000000000000017bc00d83d5a20c7000000000000000000000000000000000000000000000c8f24fdd05809e26082000000000000000000000000000000000000000000000000171442564e9c1037000000000000000000000000000000000000000000000c8f25a58ed9f8a07112",
        "logIndex": 419,
        "blockHash": "0xe64432333f6b7aa2f6d59c77317fce1473820c77d417596179e4ec97bdfc24f0"
      }
    ],
    "blockNumber": 43322041,
    "cumulativeGasUsed": "21837238",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9418D0aa02fCE40804aBF77bb81a1CcBeB91eaFC"
  ],
  "numDeployments": 1,
  "solcInputHash": "09a64aadfc29dca5f4182c701c6375fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICore\",\"name\":\"_accessControlManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"angle\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rewardId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"isOutOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merklDistributionCreator\",\"outputs\":[{\"internalType\":\"contract DistributionCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardWithTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAngleAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"rewardId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"wrapperTypes\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"propToken0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"isOutOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"internalType\":\"struct DistributionParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"merklDistributionCreator()\":{\"details\":\"Address is the same across the different chains on which it is deployed\"},\"notifyReward(address,uint256)\":{\"details\":\"Callable by any contractThis method can be used to recover leftover ANGLE tokens in the contract\"}},\"title\":\"MerklGaugeMiddlemanPolygon\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"Contract handling access control\"},\"angle()\":{\"notice\":\"Address of the ANGLE token\"},\"gaugeParams(address)\":{\"notice\":\"Maps a gauge to its reward parameters\"},\"merklDistributionCreator()\":{\"notice\":\"Address of the Merkl contract managing rewards to be distributed\"},\"notifyReward(address,uint256)\":{\"notice\":\"Transmits rewards from the `AngleDistributor` to the `DistributionCreator` with the correct parameters\"},\"notifyRewardWithTransfer(address,uint256)\":{\"notice\":\"Fetches tokens and transmits rewards in the same transaction\"},\"setAngleAllowance()\":{\"notice\":\"Restores the allowance for the ANGLE token to the `DistributionCreator` contract\"},\"setGauge(address,(bytes32,address,address,uint256,address[],uint32[],uint32,uint32,uint32,uint32,uint32,uint32,uint32,address,bytes))\":{\"notice\":\"Specifies the reward distribution parameters for `gauge`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/middleman/MerklGaugeMiddlemanPolygon.sol\":\"MerklGaugeMiddlemanPolygon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DistributionCreator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./interfaces/external/uniswap/IUniswapV3Pool.sol\\\";\\nimport \\\"./utils/UUPSHelper.sol\\\";\\nimport \\\"./struct/DistributionParameters.sol\\\";\\nimport \\\"./struct/ExtensiveDistributionParameters.sol\\\";\\nimport \\\"./struct/RewardTokenAmounts.sol\\\";\\n\\n/// @title DistributionCreator\\n/// @author Angle Labs, Inc.\\n/// @notice Manages the distribution of rewards across different pools with concentrated liquidity (like on Uniswap V3)\\n/// @dev This contract is mostly a helper for APIs built on top of Merkl\\n/// @dev People depositing rewards must have signed a `message` with the conditions for using the\\n/// product\\n//solhint-disable\\ncontract DistributionCreator is UUPSHelper, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // =========================== CONSTANTS / VARIABLES ===========================\\n\\n    /// @notice Epoch duration\\n    uint32 public constant EPOCH_DURATION = 3600;\\n\\n    /// @notice Base for fee computation\\n    uint256 public constant BASE_9 = 1e9;\\n\\n    /// @notice `Core` contract handling access control\\n    ICore public core;\\n\\n    /// @notice User contract for distributing rewards\\n    address public distributor;\\n\\n    /// @notice Address to which fees are forwarded\\n    address public feeRecipient;\\n\\n    /// @notice Value (in base 10**9) of the fees taken when creating a distribution for a pool which do not\\n    /// have a whitelisted token in it\\n    uint256 public fees;\\n\\n    /// @notice Message that needs to be acknowledged by users creating a distribution\\n    string public message;\\n\\n    /// @notice Hash of the message that needs to be signed\\n    bytes32 public messageHash;\\n\\n    /// @notice List of all rewards ever distributed or to be distributed in the contract\\n    /// @dev An attacker could try to populate this list. It shouldn't be an issue as only view functions\\n    /// iterate on it\\n    DistributionParameters[] public distributionList;\\n\\n    /// @notice Maps an address to its fee rebate\\n    mapping(address => uint256) public feeRebate;\\n\\n    /// @notice Maps a token to whether it is whitelisted or not. No fees are to be paid for incentives given\\n    /// on pools with whitelisted tokens\\n    mapping(address => uint256) public isWhitelistedToken;\\n\\n    /// @notice Maps an address to its nonce for creating a distribution\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Maps an address to the last valid hash signed\\n    mapping(address => bytes32) public userSignatures;\\n\\n    /// @notice Maps a user to whether it is whitelisted for not signing\\n    mapping(address => uint256) public userSignatureWhitelist;\\n\\n    /// @notice Maps a token to the minimum amount that must be sent per epoch for a distribution to be valid\\n    /// @dev If `rewardTokenMinAmounts[token] == 0`, then `token` cannot be used as a reward\\n    mapping(address => uint256) public rewardTokenMinAmounts;\\n\\n    /// @notice List of all reward tokens that have at some point been accepted\\n    address[] public rewardTokens;\\n\\n    uint256[36] private __gap;\\n\\n    // =================================== EVENTS ==================================\\n\\n    event DistributorUpdated(address indexed _distributor);\\n    event FeeRebateUpdated(address indexed user, uint256 userFeeRebate);\\n    event FeeRecipientUpdated(address indexed _feeRecipient);\\n    event FeesSet(uint256 _fees);\\n    event MessageUpdated(bytes32 _messageHash);\\n    event NewDistribution(DistributionParameters distribution, address indexed sender);\\n    event RewardTokenMinimumAmountUpdated(address indexed token, uint256 amount);\\n    event TokenWhitelistToggled(address indexed token, uint256 toggleStatus);\\n    event UserSigned(bytes32 messageHash, address indexed user);\\n    event UserSigningWhitelistToggled(address indexed user, uint256 toggleStatus);\\n\\n    // ================================= MODIFIERS =================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    /// @notice Checks whether an address has signed the message or not\\n    modifier hasSigned() {\\n        if (userSignatureWhitelist[msg.sender] == 0 && userSignatures[msg.sender] != messageHash) revert NotSigned();\\n        _;\\n    }\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    function initialize(ICore _core, address _distributor, uint256 _fees) external initializer {\\n        if (address(_core) == address(0) || _distributor == address(0)) revert ZeroAddress();\\n        if (_fees > BASE_9) revert InvalidParam();\\n        distributor = _distributor;\\n        core = _core;\\n        fees = _fees;\\n    }\\n\\n    constructor() initializer {}\\n\\n    /// @inheritdoc UUPSUpgradeable\\n    function _authorizeUpgrade(address) internal view override onlyGuardianUpgrader(core) {}\\n\\n    // ============================== DEPOSIT FUNCTION =============================\\n\\n    /// @notice Creates a `distribution` to incentivize a given pool for a specific period of time\\n    /// @return distributionAmount How many reward tokens are actually taken into consideration in the contract\\n    /// @dev If the address specified as a UniV3 pool is not effectively a pool, it will not be handled by the\\n    /// distribution script and rewards may be lost\\n    /// @dev Reward tokens sent as part of distributions must have been whitelisted before and amounts\\n    /// sent should be bigger than a minimum amount specific to each token\\n    /// @dev The `positionWrappers` specified in the `distribution` struct need to be supported by the script\\n    /// List of supported `positionWrappers` can be found in the docs.\\n    /// @dev If the pool incentivized contains one whitelisted token, then no fees are taken on the rewards\\n    /// @dev This function reverts if the sender has not signed the message `messageHash` once through one of\\n    /// the functions enabling to sign\\n    function createDistribution(\\n        DistributionParameters memory distribution\\n    ) external hasSigned returns (uint256 distributionAmount) {\\n        return _createDistribution(distribution);\\n    }\\n\\n    /// @notice Same as the function above but for multiple distributions at once\\n    /// @return List of all the distribution amounts actually deposited for each `distribution` in the `distributions` list\\n    function createDistributions(\\n        DistributionParameters[] memory distributions\\n    ) external hasSigned returns (uint256[] memory) {\\n        uint256 distributionsLength = distributions.length;\\n        uint256[] memory distributionAmounts = new uint256[](distributionsLength);\\n        for (uint256 i; i < distributionsLength; ) {\\n            distributionAmounts[i] = _createDistribution(distributions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return distributionAmounts;\\n    }\\n\\n    /// @notice Checks whether the `msg.sender`'s `signature` is compatible with the message\\n    /// to sign and stores the signature\\n    /// @dev If you signed the message once, and the message has not been modified, then you do not\\n    /// need to sign again\\n    function sign(bytes calldata signature) external {\\n        _sign(signature);\\n    }\\n\\n    /// @notice Combines signing the message and creating a distribution\\n    function signAndCreateDistribution(\\n        DistributionParameters memory distribution,\\n        bytes calldata signature\\n    ) external returns (uint256 distributionAmount) {\\n        _sign(signature);\\n        return _createDistribution(distribution);\\n    }\\n\\n    /// @notice Internal version of `createDistribution`\\n    function _createDistribution(\\n        DistributionParameters memory distribution\\n    ) internal nonReentrant returns (uint256 distributionAmount) {\\n        uint32 epochStart = _getRoundedEpoch(distribution.epochStart);\\n        uint256 minDistributionAmount = rewardTokenMinAmounts[distribution.rewardToken];\\n        distribution.epochStart = epochStart;\\n        // Reward are not accepted in the following conditions:\\n        if (\\n            // if epoch parameters lead to a past distribution\\n            epochStart + EPOCH_DURATION < block.timestamp ||\\n            // if the amount of epochs for which this distribution should last is zero\\n            distribution.numEpoch == 0 ||\\n            // if the distribution parameters are not correctly specified\\n            distribution.propFees + distribution.propToken0 + distribution.propToken1 != 1e4 ||\\n            // if boosted addresses get less than non-boosted addresses in case of\\n            (distribution.boostingAddress != address(0) && distribution.boostedReward < 1e4) ||\\n            // if the type of the position wrappers is not well specified\\n            distribution.positionWrappers.length != distribution.wrapperTypes.length ||\\n            // if the reward token is not whitelisted as an incentive token\\n            minDistributionAmount == 0 ||\\n            // if the amount distributed is too small with respect to what is allowed\\n            distribution.amount / distribution.numEpoch < minDistributionAmount\\n        ) revert InvalidReward();\\n        distributionAmount = distribution.amount;\\n        // Computing fees: these are waived for whitelisted addresses and if there is a whitelisted token in a pool\\n        uint256 userFeeRebate = feeRebate[msg.sender];\\n        if (\\n            userFeeRebate < BASE_9 &&\\n            isWhitelistedToken[IUniswapV3Pool(distribution.uniV3Pool).token0()] == 0 &&\\n            isWhitelistedToken[IUniswapV3Pool(distribution.uniV3Pool).token1()] == 0\\n        ) {\\n            uint256 _fees = (fees * (BASE_9 - userFeeRebate)) / BASE_9;\\n            uint256 distributionAmountMinusFees = (distributionAmount * (BASE_9 - _fees)) / BASE_9;\\n            address _feeRecipient = feeRecipient;\\n            _feeRecipient = _feeRecipient == address(0) ? address(this) : _feeRecipient;\\n            IERC20(distribution.rewardToken).safeTransferFrom(\\n                msg.sender,\\n                _feeRecipient,\\n                distributionAmount - distributionAmountMinusFees\\n            );\\n            distributionAmount = distributionAmountMinusFees;\\n            distribution.amount = distributionAmount;\\n        }\\n\\n        IERC20(distribution.rewardToken).safeTransferFrom(msg.sender, distributor, distributionAmount);\\n        uint256 senderNonce = nonces[msg.sender];\\n        nonces[msg.sender] = senderNonce + 1;\\n        distribution.rewardId = bytes32(keccak256(abi.encodePacked(msg.sender, senderNonce)));\\n        distributionList.push(distribution);\\n        emit NewDistribution(distribution, msg.sender);\\n    }\\n\\n    /// @notice Internal version of the `sign` function\\n    function _sign(bytes calldata signature) internal {\\n        bytes32 _messageHash = messageHash;\\n        if (ECDSA.recover(_messageHash, signature) != msg.sender) revert InvalidSignature();\\n        userSignatures[msg.sender] = _messageHash;\\n        emit UserSigned(_messageHash, msg.sender);\\n    }\\n\\n    // ================================= UI HELPERS ================================\\n    // These functions are not to be queried on-chain and hence are not optimized for gas consumption\\n\\n    /// @notice Returns the list of all distributions ever made or to be done in the future\\n    function getAllDistributions() external view returns (DistributionParameters[] memory) {\\n        return distributionList;\\n    }\\n\\n    /// @notice Returns the list of all currently active distributions on pools of supported AMMs (like Uniswap V3)\\n    function getActiveDistributions() external view returns (ExtensiveDistributionParameters[] memory) {\\n        uint32 roundedEpoch = _getRoundedEpoch(uint32(block.timestamp));\\n        return _getPoolDistributionsBetweenEpochs(address(0), roundedEpoch, roundedEpoch + EPOCH_DURATION);\\n    }\\n\\n    /// @notice Returns the list of all the reward tokens supported as well as their minimum amounts\\n    function getValidRewardTokens() external view returns (RewardTokenAmounts[] memory) {\\n        uint256 length;\\n        uint256 rewardTokenListLength = rewardTokens.length;\\n        RewardTokenAmounts[] memory validRewardTokens = new RewardTokenAmounts[](rewardTokenListLength);\\n        for (uint32 i; i < rewardTokenListLength; ) {\\n            address token = rewardTokens[i];\\n            uint256 minAmount = rewardTokenMinAmounts[token];\\n            if (minAmount > 0) {\\n                validRewardTokens[length] = RewardTokenAmounts(token, minAmount);\\n                length += 1;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        RewardTokenAmounts[] memory validRewardTokensShort = new RewardTokenAmounts[](length);\\n        for (uint32 i; i < length; ) {\\n            validRewardTokensShort[i] = validRewardTokens[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return validRewardTokensShort;\\n    }\\n\\n    /// @notice Returns the list of all the distributions that were or that are going to be live at\\n    /// a specific epoch\\n    function getDistributionsForEpoch(uint32 epoch) external view returns (ExtensiveDistributionParameters[] memory) {\\n        uint32 roundedEpoch = _getRoundedEpoch(epoch);\\n        return _getPoolDistributionsBetweenEpochs(address(0), roundedEpoch, roundedEpoch + EPOCH_DURATION);\\n    }\\n\\n    /// @notice Gets the distributions that were or will be live at some point between `epochStart` (included) and `epochEnd` (excluded)\\n    /// @dev If a distribution starts during `epochEnd`, it is not be returned by this function\\n    /// @dev Conversely, if a distribution starts after `epochStart` and ends before `epochEnd`, it is returned by this function\\n    function getDistributionsBetweenEpochs(\\n        uint32 epochStart,\\n        uint32 epochEnd\\n    ) external view returns (ExtensiveDistributionParameters[] memory) {\\n        return _getPoolDistributionsBetweenEpochs(address(0), _getRoundedEpoch(epochStart), _getRoundedEpoch(epochEnd));\\n    }\\n\\n    /// @notice Returns the list of all distributions that were or will be live after `epochStart` (included)\\n    function getDistributionsAfterEpoch(\\n        uint32 epochStart\\n    ) external view returns (ExtensiveDistributionParameters[] memory) {\\n        return _getPoolDistributionsBetweenEpochs(address(0), _getRoundedEpoch(epochStart), type(uint32).max);\\n    }\\n\\n    /// @notice Returns the list of all currently active distributions for a specific UniswapV3 pool\\n    function getActivePoolDistributions(\\n        address uniV3Pool\\n    ) external view returns (ExtensiveDistributionParameters[] memory) {\\n        uint32 roundedEpoch = _getRoundedEpoch(uint32(block.timestamp));\\n        return _getPoolDistributionsBetweenEpochs(uniV3Pool, roundedEpoch, roundedEpoch + EPOCH_DURATION);\\n    }\\n\\n    /// @notice Returns the list of all the distributions that were or that are going to be live at a\\n    /// specific epoch and for a specific pool\\n    function getPoolDistributionsForEpoch(\\n        address uniV3Pool,\\n        uint32 epoch\\n    ) external view returns (ExtensiveDistributionParameters[] memory) {\\n        uint32 roundedEpoch = _getRoundedEpoch(epoch);\\n        return _getPoolDistributionsBetweenEpochs(uniV3Pool, roundedEpoch, roundedEpoch + EPOCH_DURATION);\\n    }\\n\\n    /// @notice Returns the list of all distributions that were or will be live between `epochStart` (included) and `epochEnd` (excluded)\\n    /// for a specific pool\\n    function getPoolDistributionsBetweenEpochs(\\n        address uniV3Pool,\\n        uint32 epochStart,\\n        uint32 epochEnd\\n    ) external view returns (ExtensiveDistributionParameters[] memory) {\\n        return _getPoolDistributionsBetweenEpochs(uniV3Pool, _getRoundedEpoch(epochStart), _getRoundedEpoch(epochEnd));\\n    }\\n\\n    /// @notice Returns the list of all distributions that were or will be live after `epochStart` (included)\\n    /// for a specific pool\\n    function getPoolDistributionsAfterEpoch(\\n        address uniV3Pool,\\n        uint32 epochStart\\n    ) external view returns (ExtensiveDistributionParameters[] memory) {\\n        return _getPoolDistributionsBetweenEpochs(uniV3Pool, _getRoundedEpoch(epochStart), type(uint32).max);\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTIONS ===========================\\n\\n    /// @notice Sets a new `distributor` to which rewards should be distributed\\n    function setNewDistributor(address _distributor) external onlyGovernorOrGuardian {\\n        if (_distributor == address(0)) revert InvalidParam();\\n        distributor = _distributor;\\n        emit DistributorUpdated(_distributor);\\n    }\\n\\n    /// @notice Sets the fees on deposit\\n    function setFees(uint256 _fees) external onlyGovernorOrGuardian {\\n        if (_fees >= BASE_9) revert InvalidParam();\\n        fees = _fees;\\n        emit FeesSet(_fees);\\n    }\\n\\n    /// @notice Sets fee rebates for a given user\\n    function setUserFeeRebate(address user, uint256 userFeeRebate) external onlyGovernorOrGuardian {\\n        feeRebate[user] = userFeeRebate;\\n        emit FeeRebateUpdated(user, userFeeRebate);\\n    }\\n\\n    /// @notice Toggles the fee whitelist for `token`\\n    function toggleTokenWhitelist(address token) external onlyGovernorOrGuardian {\\n        uint256 toggleStatus = 1 - isWhitelistedToken[token];\\n        isWhitelistedToken[token] = toggleStatus;\\n        emit TokenWhitelistToggled(token, toggleStatus);\\n    }\\n\\n    /// @notice Recovers fees accrued on the contract for a list of `tokens`\\n    function recoverFees(IERC20[] calldata tokens, address to) external onlyGovernorOrGuardian {\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i; i < tokensLength; ) {\\n            tokens[i].safeTransfer(to, tokens[i].balanceOf(address(this)));\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets the minimum amounts per distribution epoch for different reward tokens\\n    function setRewardTokenMinAmounts(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external onlyGovernorOrGuardian {\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i; i < tokensLength; ++i) {\\n            uint256 amount = amounts[i];\\n            // Basic logic check to make sure there are no duplicates in the `rewardTokens` table. If a token is\\n            // removed then re-added, it will appear as a duplicate in the list\\n            if (amount > 0 && rewardTokenMinAmounts[tokens[i]] == 0) rewardTokens.push(tokens[i]);\\n            rewardTokenMinAmounts[tokens[i]] = amount;\\n            emit RewardTokenMinimumAmountUpdated(tokens[i], amount);\\n        }\\n    }\\n\\n    /// @notice Sets a new address to receive fees\\n    function setFeeRecipient(address _feeRecipient) external onlyGovernorOrGuardian {\\n        feeRecipient = _feeRecipient;\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    /// @notice Sets the message that needs to be signed by users before posting rewards\\n    function setMessage(string memory _message) external onlyGovernorOrGuardian {\\n        message = _message;\\n        bytes32 _messageHash = ECDSA.toEthSignedMessageHash(bytes(_message));\\n        messageHash = _messageHash;\\n        emit MessageUpdated(_messageHash);\\n    }\\n\\n    /// @notice Toggles the whitelist status for `user` when it comes to signing messages before depositing rewards.\\n    function toggleSigningWhitelist(address user) external onlyGovernorOrGuardian {\\n        uint256 whitelistStatus = 1 - userSignatureWhitelist[user];\\n        userSignatureWhitelist[user] = whitelistStatus;\\n        emit UserSigningWhitelistToggled(user, whitelistStatus);\\n    }\\n\\n    // ============================== INTERNAL HELPERS =============================\\n\\n    /// @notice Rounds an `epoch` timestamp to the start of the corresponding period\\n    function _getRoundedEpoch(uint32 epoch) internal pure returns (uint32) {\\n        return (epoch / EPOCH_DURATION) * EPOCH_DURATION;\\n    }\\n\\n    /// @notice Checks whether `distribution` was live between `roundedEpochStart` and `roundedEpochEnd`\\n    function _isDistributionLiveBetweenEpochs(\\n        DistributionParameters storage distribution,\\n        uint32 roundedEpochStart,\\n        uint32 roundedEpochEnd\\n    ) internal view returns (bool) {\\n        uint256 distributionEpochStart = distribution.epochStart;\\n        return (distributionEpochStart + distribution.numEpoch * EPOCH_DURATION > roundedEpochStart &&\\n            distributionEpochStart < roundedEpochEnd);\\n    }\\n\\n    /// @notice Fetches data for `token` on the Uniswap `pool`\\n    function _getUniswapTokenData(\\n        IERC20Metadata token,\\n        address pool\\n    ) internal view returns (UniswapTokenData memory data) {\\n        data.add = address(token);\\n        data.decimals = token.decimals();\\n        data.symbol = token.symbol();\\n        data.poolBalance = token.balanceOf(pool);\\n    }\\n\\n    /// @notice Fetches extra data about the parameters in a distribution\\n    function _getExtensiveDistributionParameters(\\n        DistributionParameters memory distribution\\n    ) internal view returns (ExtensiveDistributionParameters memory extensiveParams) {\\n        extensiveParams.base = distribution;\\n        try IUniswapV3Pool(distribution.uniV3Pool).fee() returns (uint24 fee) {\\n            extensiveParams.poolFee = fee;\\n        } catch {\\n            extensiveParams.poolFee = 0;\\n        }\\n        extensiveParams.token0 = _getUniswapTokenData(\\n            IERC20Metadata(IUniswapV3Pool(distribution.uniV3Pool).token0()),\\n            distribution.uniV3Pool\\n        );\\n        extensiveParams.token1 = _getUniswapTokenData(\\n            IERC20Metadata(IUniswapV3Pool(distribution.uniV3Pool).token1()),\\n            distribution.uniV3Pool\\n        );\\n        extensiveParams.rewardTokenSymbol = IERC20Metadata(distribution.rewardToken).symbol();\\n        extensiveParams.rewardTokenDecimals = IERC20Metadata(distribution.rewardToken).decimals();\\n    }\\n\\n    /// @notice Gets the list of all the distributions for `uniV3Pool` that have been active between `epochStart` and `epochEnd` (excluded)\\n    /// @dev If the `uniV3Pool` parameter is equal to 0, then this function will return the distributions for all pools\\n    function _getPoolDistributionsBetweenEpochs(\\n        address uniV3Pool,\\n        uint32 epochStart,\\n        uint32 epochEnd\\n    ) internal view returns (ExtensiveDistributionParameters[] memory) {\\n        uint256 length;\\n        uint256 distributionListLength = distributionList.length;\\n        DistributionParameters[] memory longActiveRewards = new DistributionParameters[](distributionListLength);\\n        for (uint32 i; i < distributionListLength; ) {\\n            DistributionParameters storage distribution = distributionList[i];\\n            if (\\n                _isDistributionLiveBetweenEpochs(distribution, epochStart, epochEnd) &&\\n                (uniV3Pool == address(0) || distribution.uniV3Pool == uniV3Pool)\\n            ) {\\n                longActiveRewards[length] = distribution;\\n                length += 1;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        ExtensiveDistributionParameters[] memory activeRewards = new ExtensiveDistributionParameters[](length);\\n        for (uint32 i; i < length; ) {\\n            activeRewards[i] = _getExtensiveDistributionParameters(longActiveRewards[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return activeRewards;\\n    }\\n}\\n\",\"keccak256\":\"0xb8754bec82e84d1f73cde58080f4c117ad1a6cc0c02de5b6f81cf3aab8fc4afa\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\n/// @title ICore\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `Core` contracts of smart contract modules used in Angle Labs contracts\\ninterface ICore {\\n    /// @notice Checks whether an address is governor\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is a governor or a guardian of a module\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb37fb32979570ed78511625feb6c3856c200a879d6789eef6eb13093b628a0e9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3Pool {\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x7035bcab3bfd00a984c1bedd1f78a6cd358a423a60f40666837b740dd2f73fe1\",\"license\":\"GPL-3.0\"},\"contracts/middleman/MerklGaugeMiddleman.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../DistributionCreator.sol\\\";\\n\\n/// @title MerklGaugeMiddleman\\n/// @author Angle Labs, Inc.\\n/// @notice Manages the transfer of ANGLE rewards to the `DistributionCreator` contract\\n/// @dev This contract is built under the assumption that the `DistributionCreator` contract has already whitelisted\\n/// this contract for it to distribute rewards without having to sign a message\\n/// @dev Transient funds left in this contract after a call may be exploited\\ncontract MerklGaugeMiddleman {\\n    using SafeERC20 for IERC20;\\n\\n    // ================================= PARAMETERS ================================\\n\\n    /// @notice Contract handling access control\\n    ICore public accessControlManager;\\n\\n    /// @notice Maps a gauge to its reward parameters\\n    mapping(address => DistributionParameters) public gaugeParams;\\n\\n    // =================================== EVENT ===================================\\n\\n    event GaugeSet(address indexed gauge);\\n\\n    constructor(ICore _accessControlManager) {\\n        if (address(_accessControlManager) == address(0)) revert ZeroAddress();\\n        accessControlManager = _accessControlManager;\\n        IERC20 _angle = angle();\\n        // Condition left here for testing purposes\\n        if (address(_angle) != address(0))\\n            _angle.safeIncreaseAllowance(address(merklDistributionCreator()), type(uint256).max);\\n    }\\n\\n    // ================================= REFERENCES ================================\\n\\n    /// @notice Address of the ANGLE token\\n    function angle() public view virtual returns (IERC20) {\\n        return IERC20(0x31429d1856aD1377A8A0079410B297e1a9e214c2);\\n    }\\n\\n    /// @notice Address of the Merkl contract managing rewards to be distributed\\n    /// @dev Address is the same across the different chains on which it is deployed\\n    function merklDistributionCreator() public view virtual returns (DistributionCreator) {\\n        return DistributionCreator(0x8BB4C975Ff3c250e0ceEA271728547f3802B36Fd);\\n    }\\n\\n    // ============================= EXTERNAL FUNCTIONS ============================\\n\\n    /// @notice Restores the allowance for the ANGLE token to the `DistributionCreator` contract\\n    function setAngleAllowance() external {\\n        IERC20 _angle = angle();\\n        address manager = address(merklDistributionCreator());\\n        uint256 currentAllowance = _angle.allowance(address(this), manager);\\n        if (currentAllowance < type(uint256).max)\\n            _angle.safeIncreaseAllowance(manager, type(uint256).max - currentAllowance);\\n    }\\n\\n    /// @notice Specifies the reward distribution parameters for `gauge`\\n    function setGauge(address gauge, DistributionParameters memory params) external {\\n        if (!accessControlManager.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        DistributionCreator manager = merklDistributionCreator();\\n        if (\\n            gauge == address(0) ||\\n            params.rewardToken != address(angle()) ||\\n            (manager.isWhitelistedToken(IUniswapV3Pool(params.uniV3Pool).token0()) == 0 &&\\n                manager.isWhitelistedToken(IUniswapV3Pool(params.uniV3Pool).token1()) == 0)\\n        ) revert InvalidParams();\\n        gaugeParams[gauge] = params;\\n        emit GaugeSet(gauge);\\n    }\\n\\n    /// @notice Transmits rewards from the `AngleDistributor` to the `DistributionCreator` with the correct\\n    /// parameters\\n    /// @dev Callable by any contract\\n    /// @dev This method can be used to recover leftover ANGLE tokens in the contract\\n    function notifyReward(address gauge, uint256 amount) public {\\n        DistributionParameters memory params = gaugeParams[gauge];\\n        if (params.uniV3Pool == address(0)) revert InvalidParams();\\n        if (amount == 0) amount = angle().balanceOf(address(this));\\n        params.epochStart = uint32(block.timestamp);\\n        params.amount = amount;\\n        DistributionCreator creator = merklDistributionCreator();\\n        if (amount > 0) {\\n            // Need to deal with minimum distribution amounts\\n            if (amount > creator.rewardTokenMinAmounts(address(angle())) * params.numEpoch) {\\n                merklDistributionCreator().createDistribution(params);\\n            } else {\\n                // Sending leftover ANGLE tokens to the `msg.sender`\\n                angle().safeTransfer(msg.sender, amount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Fetches tokens and transmits rewards in the same transaction\\n    function notifyRewardWithTransfer(address gauge, uint256 amount) external {\\n        angle().safeTransferFrom(msg.sender, address(this), amount);\\n        notifyReward(gauge, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2bd4f5a36c1e095a22849614acf6a21450d159e1e19157e301cdd5b4d0ca38fa\",\"license\":\"BUSL-1.1\"},\"contracts/middleman/MerklGaugeMiddlemanPolygon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./MerklGaugeMiddleman.sol\\\";\\n\\n/// @title MerklGaugeMiddlemanPolygon\\n/// @author Angle Labs, Inc.\\ncontract MerklGaugeMiddlemanPolygon is MerklGaugeMiddleman {\\n    constructor(ICore _accessControlManager) MerklGaugeMiddleman(_accessControlManager) {}\\n\\n    function angle() public pure override returns (IERC20) {\\n        return IERC20(0x900F717EA076E1E7a484ad9DD2dB81CEEc60eBF1);\\n    }\\n}\\n\",\"keccak256\":\"0x4679c383f61b18472e391e5a452ebb57d1c1a6fe208b4e7af3e7cf79a5d07872\",\"license\":\"GPL-3.0\"},\"contracts/struct/DistributionParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nstruct DistributionParameters {\\n    // ID of the reward (populated once created)\\n    bytes32 rewardId;\\n    // Address of the UniswapV3 pool that needs to be incentivized\\n    address uniV3Pool;\\n    // Address of the reward token for the incentives\\n    address rewardToken;\\n    // Amount of `rewardToken` to distribute across all the epochs\\n    // Amount distributed per epoch is `amount/numEpoch`\\n    uint256 amount;\\n    // List of all UniV3 position wrappers to consider for this contract\\n    // (this can include addresses of Arrakis or Gamma smart contracts for instance)\\n    address[] positionWrappers;\\n    // Type (Arrakis, Gamma, ...) encoded as a `uint32` for each wrapper in the list above. Mapping between wrapper types and their\\n    // corresponding `uint32` value can be found in Angle Docs\\n    uint32[] wrapperTypes;\\n    // In the incentivization formula, how much of the fees should go to holders of token0\\n    // in base 10**4\\n    uint32 propToken0;\\n    // Proportion for holding token1 (in base 10**4)\\n    uint32 propToken1;\\n    // Proportion for providing a useful liquidity (in base 10**4) that generates fees\\n    uint32 propFees;\\n    // Timestamp at which the incentivization should start\\n    uint32 epochStart;\\n    // Amount of epochs for which incentivization should last\\n    uint32 numEpoch;\\n    // Whether out of range liquidity should still be incentivized or not\\n    // This should be equal to 1 if out of range liquidity should still be incentivized\\n    // and 0 otherwise\\n    uint32 isOutOfRangeIncentivized;\\n    // How much more addresses with a maximum boost can get with respect to addresses\\n    // which do not have a boost (in base 4). In the case of Curve where addresses get 2.5x more\\n    // this would be 25000\\n    uint32 boostedReward;\\n    // Address of the token which dictates who gets boosted rewards or not. This is optional\\n    // and if the zero address is given no boost will be taken into account\\n    address boostingAddress;\\n    // Additional data passed when distributing rewards. This parameter may be used in case\\n    // the reward distribution script needs to look into other parameters beyond the ones above.\\n    bytes additionalData;\\n}\\n\",\"keccak256\":\"0x5b1052de872e6d6a69f343cd07aed4daefc596d2afe5c580c2bbb30b578b70bc\",\"license\":\"BUSL-1.1\"},\"contracts/struct/ExtensiveDistributionParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./DistributionParameters.sol\\\";\\n\\nstruct UniswapTokenData {\\n    address add;\\n    uint8 decimals;\\n    string symbol;\\n    uint256 poolBalance;\\n}\\n\\nstruct ExtensiveDistributionParameters {\\n    DistributionParameters base;\\n    // Uniswap pool data\\n    uint24 poolFee;\\n    UniswapTokenData token0;\\n    UniswapTokenData token1;\\n    // rewardToken data\\n    string rewardTokenSymbol;\\n    uint8 rewardTokenDecimals;\\n}\\n\",\"keccak256\":\"0xc0df2d8ee61cad7b9fdf6e99eaa1a271825bfe193381ea55ee3f4d37434a6c05\",\"license\":\"BUSL-1.1\"},\"contracts/struct/RewardTokenAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nstruct RewardTokenAmounts {\\n    address token;\\n    uint256 minimumAmountPerEpoch;\\n}\\n\",\"keccak256\":\"0x76b12fb56b989673bcead693bc7d925f21b8ab3b9c5e900fe8e8b42d85286f1d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nerror InvalidDispute();\\nerror InvalidLengths();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidProof();\\nerror InvalidUninitializedRoot();\\nerror InvalidReward();\\nerror InvalidSignature();\\nerror NoDispute();\\nerror NotGovernor();\\nerror NotGovernorOrGuardian();\\nerror NotSigned();\\nerror NotTrusted();\\nerror NotWhitelisted();\\nerror UnresolvedDispute();\\nerror ZeroAddress();\\n\",\"keccak256\":\"0x7cd16f5988dee579532a71ff4afd8668c75add546e7e4724c1aaadd888355139\",\"license\":\"GPL-3.0\"},\"contracts/utils/UUPSHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\n/// @title UUPSHelper\\n/// @notice Helper contract for UUPSUpgradeable contracts where the upgradeability is controlled by a specific address\\n/// @author Angle Labs., Inc\\n/// @dev The 0 address check in the modifier allows the use of these modifiers during initialization\\nabstract contract UUPSHelper is UUPSUpgradeable {\\n    modifier onlyGuardianUpgrader(ICore _core) {\\n        if (address(_core) != address(0) && !_core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    modifier onlyGovernorUpgrader(ICore _core) {\\n        if (address(_core) != address(0) && !_core.isGovernor(msg.sender)) revert NotGovernor();\\n        _;\\n    }\\n\\n    constructor() initializer {}\\n}\\n\",\"keccak256\":\"0xafd8edf5814fb1c65a82ec67d7dc02c9fa02e17689ab618d0fa8fc81dc5508a0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060409080825234620002ce5780620022ae8038038091620000238285620002d3565b8339602092839181010312620002ce57516001600160a01b0381169190829003620002ce578115620002bd5760009160018060a01b0319835416178255825190636eb1769f60e11b82526004923084840152738bb4c975ff3c250e0ceea271728547f3802b36fd602493818582015273900f717ea076e1e7a484ad9dd2db81ceec60ebf18482604481845afa918215620002b35784926200027a575b50600019820180921162000268578751918583019363095ea7b360e01b855287840152604483015260448252608082019260018060401b039280851084861117620002565760c081018581108582111762000244578a528685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015251859283929083905af13d1562000234573d9182116200022257906200018692918851916200017887601f19601f8401160184620002d3565b82523d858784013e6200030d565b8051806200019e575b8651611eb59081620003f98239f35b818491810103126200021e57820151908115918215036200021b5750620001c8578080806200018f565b90602a91608494519362461bcd60e51b85528401528201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b80fd5b5080fd5b634e487b7160e01b8452604187528584fd5b620001869291506060906200030d565b634e487b7160e01b875260418a528887fd5b634e487b7160e01b8652604189528786fd5b634e487b7160e01b8452601187528584fd5b9091508481813d8311620002ab575b620002958183620002d3565b81010312620002a757519038620000bf565b8380fd5b503d62000289565b88513d86823e3d90fd5b825163d92e233d60e01b8152600490fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620002f757604052565b634e487b7160e01b600052604160045260246000fd5b90919015620003865750805115620003225790565b73900f717ea076e1e7a484ad9dd2db81ceec60ebf13b15620003415790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b815115620003975750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510620003de575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620003ba56fe6080604052600436101561001257600080fd5b60003560e01c8063031ccdda146110f05780630ee60494146110a3578063154eb20914610e9d5780631df2f4e014610232578063230cfbc41461015d5780639b79c20414610110578063b4a0bdf3146100be5763e32471801461007457600080fd5b346100b95760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576100b76100ae611204565b60243590611701565b005b600080fd5b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957602060405173900f717ea076e1e7a484ad9dd2db81ceec60ebf18152f35b346100b95760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957610194611204565b602435604051917f23b872dd0000000000000000000000000000000000000000000000000000000060208401523360248401523060448401528160648401526064835260a0830183811067ffffffffffffffff821117610203576100b7936101fe91604052611496565b611701565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b346100b9577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126100b95761026a611204565b60243567ffffffffffffffff81116100b9576101e0809382360301126100b95760405192830183811067ffffffffffffffff82111761020357604052806004013583526102b960248201611227565b60208401526102ca60448201611227565b604084015260648101356060840152608481013567ffffffffffffffff81116100b9578101366023820112156100b9576004810135906103098261141b565b9161031760405193846112b7565b8083526024602084019160051b830101913683116100b957602401905b828210610e8557505050608084015260a481013567ffffffffffffffff81116100b9578101366023820112156100b9576004810135906103738261141b565b9161038160405193846112b7565b8083526024602084019160051b830101913683116100b957602401905b828210610e6d5750505060a08401526103b960c48201611433565b60c08401526103ca60e48201611433565b60e08401526103dc6101048201611433565b6101008401526103ef6101248201611433565b6101208401526104026101448201611433565b6101408401526104156101648201611433565b6101608401526104286101848201611433565b61018084015261043b6101a48201611227565b6101a08401526101c48101359067ffffffffffffffff82116100b9573660238383010112156100b95761047360048383010135611444565b9161048160405193846112b7565b8181016004810135808552369101602401116100b957600481838260209460009601013560248383010185880137010135830101526101c08301526024602073ffffffffffffffffffffffffffffffffffffffff60005416604051928380927f521d4de90000000000000000000000000000000000000000000000000000000082523360048301525afa908115610d5057600091610e3e575b5015610e145773ffffffffffffffffffffffffffffffffffffffff8116158015610ddc575b8015610b7d575b610b535773ffffffffffffffffffffffffffffffffffffffff8116600052600160205260406000208251815573ffffffffffffffffffffffffffffffffffffffff6020840151167fffffffffffffffffffffffff00000000000000000000000000000000000000006001830154161760018201556002810173ffffffffffffffffffffffffffffffffffffffff6040850151167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905560608301516003820155608083015180519067ffffffffffffffff821161020357680100000000000000008211610203576020906004840154836004860155808410610b33575b500160048301600052602060002060005b838110610b09575050505060a0830151805167ffffffffffffffff81116102035768010000000000000000811161020357602060058401928354838555808410610a9b575b50019160005260206000209060005b8160031c8110610a4c57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8811681036109d3575b50505060088160066101c0930163ffffffff60c0870151168682549167ffffffff0000000060e083015160201b166bffffffff000000000000000061010084015160401b166fffffffff00000000000000000000000061012085015160601b169173ffffffff0000000000000000000000000000000061014086015160801b16937fffffffff000000000000000000000000000000000000000000000000000000007bffffffff00000000000000000000000000000000000000000000000061018077ffffffff00000000000000000000000000000000000000006101608a015160a01b1698015160c01b1697161717171717171790556007810173ffffffffffffffffffffffffffffffffffffffff6101a0870151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055019201519182519267ffffffffffffffff8411610203576108408254611248565b601f8111610996575b50602090601f85116001146108dd5773ffffffffffffffffffffffffffffffffffffffff9491600091836108d2575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b167fb947d28129d3b40272a411eeee3a2842c6335a0f0269abf492e8c20218bf02b0600080a2005b015190508580610878565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516918360005260206000209260005b81811061097e575091600193918773ffffffffffffffffffffffffffffffffffffffff989410610947575b505050811b0190556108aa565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905585808061093a565b9293602060018192878601518155019501930161090f565b6109c390836000526020600020601f870160051c810191602088106109c9575b601f0160051c01906116ea565b84610849565b90915081906109b6565b60009260005b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8831683038110610a1657505060031c015560086101c0856106e1565b90936020610a4360019263ffffffff885116908560021b60031b63ffffffff811b9283911b169119161790565b950191016109d9565b6000805b60088110610a655750838201556001016106ac565b94906020610a9260019263ffffffff855116908960021b60031b63ffffffff811b9283911b169119161790565b92019501610a50565b610acb908560005283600020600780870160031c820192601c8860021b1680610ad1575b500160031c01906116ea565b8761069d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90818601918254918a0360031b1c1690558c610abf565b600190602073ffffffffffffffffffffffffffffffffffffffff8551169401938184015501610658565b610b4d9060048601600052848460002091820191016116ea565b86610647565b60046040517fa86b6512000000000000000000000000000000000000000000000000000000008152fd5b506004602073ffffffffffffffffffffffffffffffffffffffff8185015116604051928380927f0dfe16810000000000000000000000000000000000000000000000000000000082525afa908115610d5057600091610dbd575b5073ffffffffffffffffffffffffffffffffffffffff604051917fab37f486000000000000000000000000000000000000000000000000000000008352166004820152602081602481738bb4c975ff3c250e0ceea271728547f3802b36fd5afa908115610d5057600091610d8b575b5015801561054657506004602073ffffffffffffffffffffffffffffffffffffffff8185015116604051928380927fd21220a70000000000000000000000000000000000000000000000000000000082525afa908115610d5057600091610d5c575b5073ffffffffffffffffffffffffffffffffffffffff604051917fab37f486000000000000000000000000000000000000000000000000000000008352166004820152602081602481738bb4c975ff3c250e0ceea271728547f3802b36fd5afa908115610d5057600091610d1e575b5015610546565b90506020813d602011610d48575b81610d39602093836112b7565b810103126100b9575183610d17565b3d9150610d2c565b6040513d6000823e3d90fd5b610d7e915060203d602011610d84575b610d7681836112b7565b8101906116be565b83610ca8565b503d610d6c565b90506020813d602011610db5575b81610da6602093836112b7565b810103126100b9575183610c46565b3d9150610d99565b610dd6915060203d602011610d8457610d7681836112b7565b83610bd7565b5073900f717ea076e1e7a484ad9dd2db81ceec60ebf173ffffffffffffffffffffffffffffffffffffffff604084015116141561053f565b60046040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b610e60915060203d602011610e66575b610e5881836112b7565b81019061147e565b8361051a565b503d610e4e565b60208091610e7a84611433565b81520191019061039e565b60208091610e9284611227565b815201910190610334565b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576040517fdd62ed3e00000000000000000000000000000000000000000000000000000000808252306004830152738bb4c975ff3c250e0ceea271728547f3802b36fd602483015273900f717ea076e1e7a484ad9dd2db81ceec60ebf1916020918282604481875afa918215610d5057600092611074575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8210610f6d57005b604051908152306004820152738bb4c975ff3c250e0ceea271728547f3802b36fd6024820152928290849060449082905afa928315610d5057600093611045575b50198201809211611016576100b7917f095ea7b30000000000000000000000000000000000000000000000000000000060405192830152738bb4c975ff3c250e0ceea271728547f3802b36fd60248301526044820152604481526110118161129b565b611496565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9092508181813d831161106d575b61105d81836112b7565b810103126100b957519183610fae565b503d611053565b9091508281813d831161109c575b61108c81836112b7565b810103126100b957519084610f43565b503d611082565b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576020604051738bb4c975ff3c250e0ceea271728547f3802b36fd8152f35b346100b95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b95773ffffffffffffffffffffffffffffffffffffffff8061113d611204565b16600052600160205260406000209061120082549180600185015416938160028201541691600382015461117f600860068501549360078601541694016112f8565b93604051978897885260208801526040870152606086015263ffffffff908181166080870152818160201c1660a0870152818160401c1660c0870152818160601c1660e0870152818160801c16610100870152818160a01c1661012087015260c01c166101408501526101608401526101a0806101808501528301906113bd565b0390f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100b957565b359073ffffffffffffffffffffffffffffffffffffffff821682036100b957565b90600182811c92168015611291575b602083101461126257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611257565b6080810190811067ffffffffffffffff82111761020357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761020357604052565b906040519182600082549261130c84611248565b90818452600194858116908160001461137b5750600114611338575b5050611336925003836112b7565b565b9093915060005260209081600020936000915b81831061136357505061133693508201013880611328565b8554888401850152948501948794509183019161134b565b90506113369550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880611328565b919082519283825260005b8481106114075750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016113c8565b67ffffffffffffffff81116102035760051b60200190565b359063ffffffff821682036100b957565b67ffffffffffffffff811161020357601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b908160209103126100b9575180151581036100b95790565b604051604081019080821067ffffffffffffffff83111761020357611530916040526000806020948584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648685015285815191018273900f717ea076e1e7a484ad9dd2db81ceec60ebf15af13d156115d9573d9061151482611444565b9161152260405193846112b7565b82523d60008684013e6115dd565b8051908161153d57505050565b828061154d93830101910161147e565b156115555750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6060905b9091901561166c57508051156115f05790565b73900f717ea076e1e7a484ad9dd2db81ceec60ebf13b1561160e5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b81511561167c5750805190602001fd5b6116ba906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906113bd565b0390fd5b908160209103126100b9575173ffffffffffffffffffffffffffffffffffffffff811681036100b95790565b8181106116f5575050565b600081556001016116ea565b73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090604051916101e0830183811067ffffffffffffffff821117610203576040528054835273ffffffffffffffffffffffffffffffffffffffff600182015416602084015273ffffffffffffffffffffffffffffffffffffffff600282015416604084015260038101546060840152600481016040518082602082945493848152019060005260206000209260005b818110611e505750506117c7925003826112b7565b6080840152600581016040519081602082549182815201916000526020600020906000915b816007840110611de557936118d09593819361184d936008975491818110611dce575b818110611db5575b818110611d9b575b818110611d81575b818110611d67575b818110611d4d575b818110611d33575b10611d25575b5003826112b7565b60a086015263ffffffff600682015481811660c0880152818160201c1660e0880152818160401c16610100880152818160601c16610120880152818160801c16610140880152818160a01c1661016088015260c01c1661018086015273ffffffffffffffffffffffffffffffffffffffff6007820154166101a0860152016112f8565b6101c083015273ffffffffffffffffffffffffffffffffffffffff60208301511615610b53578015611c94575b63ffffffff421661012083015280606083015280611919575050565b6040517f2acd7ec400000000000000000000000000000000000000000000000000000000815273900f717ea076e1e7a484ad9dd2db81ceec60ebf16004820152602081602481738bb4c975ff3c250e0ceea271728547f3802b36fd5afa908115610d5057600091611c62575b5063ffffffff610140840151169080828102048214811517156110165702811115611c1b5750604051907fb9d81abc000000000000000000000000000000000000000000000000000000008252602060048301528161020481018251602483015273ffffffffffffffffffffffffffffffffffffffff602084015116604483015273ffffffffffffffffffffffffffffffffffffffff6040840151166064830152606083015160848301526080830151906101e060a484015281518091526020610224840192019060005b818110611bec5750505060a0830151907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8382030160c48401526020808351928381520192019060005b818110611bcd57505050611b7e82916101c08563ffffffff60c060209801511660e486015263ffffffff60e08201511661010486015263ffffffff6101008201511661012486015263ffffffff6101208201511661014486015263ffffffff6101408201511661016486015263ffffffff6101608201511661018486015263ffffffff610180820151166101a486015273ffffffffffffffffffffffffffffffffffffffff6101a0820151166101c486015201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016101e48501526113bd565b03816000738bb4c975ff3c250e0ceea271728547f3802b36fd5af18015610d5057611ba65750565b602090813d8311611bc6575b611bbc81836112b7565b810103126100b957565b503d611bb2565b825163ffffffff16845286945060209384019390920191600101611a9a565b825173ffffffffffffffffffffffffffffffffffffffff16845286945060209384019390920191600101611a50565b6113369150604051907fa9059cbb0000000000000000000000000000000000000000000000000000000060208301523360248301526044820152604481526110118161129b565b90506020813d602011611c8c575b81611c7d602093836112b7565b810103126100b9575138611985565b3d9150611c70565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208160248173900f717ea076e1e7a484ad9dd2db81ceec60ebf15afa908115610d5057600091611cf3575b506118fd565b90506020813d602011611d1d575b81611d0e602093836112b7565b810103126100b9575138611ced565b3d9150611d01565b60e01c815260200138611845565b92602060019163ffffffff8560c01c16815201930161183f565b92602060019163ffffffff8560a01c168152019301611837565b92602060019163ffffffff8560801c16815201930161182f565b92602060019163ffffffff8560601c168152019301611827565b92602060019163ffffffff8560401c16815201930161181f565b92602060019163ffffffff85831c168152019301611817565b92602060019163ffffffff8516815201930161180f565b926001610100600892865463ffffffff8082168352808260201c166020840152808260401c166040840152808260601c166060840152808260801c16608084015260a08183821c169084015260c09082821c169083015260e090811c908201520194019201916117ec565b845473ffffffffffffffffffffffffffffffffffffffff168352600194850194869450602090930192016117b256fea26469706673582212208d99a225d8edaaafa5d9032f5cc78e89bc1ebe886976815051cd3884e078252464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063031ccdda146110f05780630ee60494146110a3578063154eb20914610e9d5780631df2f4e014610232578063230cfbc41461015d5780639b79c20414610110578063b4a0bdf3146100be5763e32471801461007457600080fd5b346100b95760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576100b76100ae611204565b60243590611701565b005b600080fd5b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957602060405173900f717ea076e1e7a484ad9dd2db81ceec60ebf18152f35b346100b95760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b957610194611204565b602435604051917f23b872dd0000000000000000000000000000000000000000000000000000000060208401523360248401523060448401528160648401526064835260a0830183811067ffffffffffffffff821117610203576100b7936101fe91604052611496565b611701565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b346100b9577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126100b95761026a611204565b60243567ffffffffffffffff81116100b9576101e0809382360301126100b95760405192830183811067ffffffffffffffff82111761020357604052806004013583526102b960248201611227565b60208401526102ca60448201611227565b604084015260648101356060840152608481013567ffffffffffffffff81116100b9578101366023820112156100b9576004810135906103098261141b565b9161031760405193846112b7565b8083526024602084019160051b830101913683116100b957602401905b828210610e8557505050608084015260a481013567ffffffffffffffff81116100b9578101366023820112156100b9576004810135906103738261141b565b9161038160405193846112b7565b8083526024602084019160051b830101913683116100b957602401905b828210610e6d5750505060a08401526103b960c48201611433565b60c08401526103ca60e48201611433565b60e08401526103dc6101048201611433565b6101008401526103ef6101248201611433565b6101208401526104026101448201611433565b6101408401526104156101648201611433565b6101608401526104286101848201611433565b61018084015261043b6101a48201611227565b6101a08401526101c48101359067ffffffffffffffff82116100b9573660238383010112156100b95761047360048383010135611444565b9161048160405193846112b7565b8181016004810135808552369101602401116100b957600481838260209460009601013560248383010185880137010135830101526101c08301526024602073ffffffffffffffffffffffffffffffffffffffff60005416604051928380927f521d4de90000000000000000000000000000000000000000000000000000000082523360048301525afa908115610d5057600091610e3e575b5015610e145773ffffffffffffffffffffffffffffffffffffffff8116158015610ddc575b8015610b7d575b610b535773ffffffffffffffffffffffffffffffffffffffff8116600052600160205260406000208251815573ffffffffffffffffffffffffffffffffffffffff6020840151167fffffffffffffffffffffffff00000000000000000000000000000000000000006001830154161760018201556002810173ffffffffffffffffffffffffffffffffffffffff6040850151167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905560608301516003820155608083015180519067ffffffffffffffff821161020357680100000000000000008211610203576020906004840154836004860155808410610b33575b500160048301600052602060002060005b838110610b09575050505060a0830151805167ffffffffffffffff81116102035768010000000000000000811161020357602060058401928354838555808410610a9b575b50019160005260206000209060005b8160031c8110610a4c57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8811681036109d3575b50505060088160066101c0930163ffffffff60c0870151168682549167ffffffff0000000060e083015160201b166bffffffff000000000000000061010084015160401b166fffffffff00000000000000000000000061012085015160601b169173ffffffff0000000000000000000000000000000061014086015160801b16937fffffffff000000000000000000000000000000000000000000000000000000007bffffffff00000000000000000000000000000000000000000000000061018077ffffffff00000000000000000000000000000000000000006101608a015160a01b1698015160c01b1697161717171717171790556007810173ffffffffffffffffffffffffffffffffffffffff6101a0870151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055019201519182519267ffffffffffffffff8411610203576108408254611248565b601f8111610996575b50602090601f85116001146108dd5773ffffffffffffffffffffffffffffffffffffffff9491600091836108d2575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b167fb947d28129d3b40272a411eeee3a2842c6335a0f0269abf492e8c20218bf02b0600080a2005b015190508580610878565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516918360005260206000209260005b81811061097e575091600193918773ffffffffffffffffffffffffffffffffffffffff989410610947575b505050811b0190556108aa565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905585808061093a565b9293602060018192878601518155019501930161090f565b6109c390836000526020600020601f870160051c810191602088106109c9575b601f0160051c01906116ea565b84610849565b90915081906109b6565b60009260005b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8831683038110610a1657505060031c015560086101c0856106e1565b90936020610a4360019263ffffffff885116908560021b60031b63ffffffff811b9283911b169119161790565b950191016109d9565b6000805b60088110610a655750838201556001016106ac565b94906020610a9260019263ffffffff855116908960021b60031b63ffffffff811b9283911b169119161790565b92019501610a50565b610acb908560005283600020600780870160031c820192601c8860021b1680610ad1575b500160031c01906116ea565b8761069d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90818601918254918a0360031b1c1690558c610abf565b600190602073ffffffffffffffffffffffffffffffffffffffff8551169401938184015501610658565b610b4d9060048601600052848460002091820191016116ea565b86610647565b60046040517fa86b6512000000000000000000000000000000000000000000000000000000008152fd5b506004602073ffffffffffffffffffffffffffffffffffffffff8185015116604051928380927f0dfe16810000000000000000000000000000000000000000000000000000000082525afa908115610d5057600091610dbd575b5073ffffffffffffffffffffffffffffffffffffffff604051917fab37f486000000000000000000000000000000000000000000000000000000008352166004820152602081602481738bb4c975ff3c250e0ceea271728547f3802b36fd5afa908115610d5057600091610d8b575b5015801561054657506004602073ffffffffffffffffffffffffffffffffffffffff8185015116604051928380927fd21220a70000000000000000000000000000000000000000000000000000000082525afa908115610d5057600091610d5c575b5073ffffffffffffffffffffffffffffffffffffffff604051917fab37f486000000000000000000000000000000000000000000000000000000008352166004820152602081602481738bb4c975ff3c250e0ceea271728547f3802b36fd5afa908115610d5057600091610d1e575b5015610546565b90506020813d602011610d48575b81610d39602093836112b7565b810103126100b9575183610d17565b3d9150610d2c565b6040513d6000823e3d90fd5b610d7e915060203d602011610d84575b610d7681836112b7565b8101906116be565b83610ca8565b503d610d6c565b90506020813d602011610db5575b81610da6602093836112b7565b810103126100b9575183610c46565b3d9150610d99565b610dd6915060203d602011610d8457610d7681836112b7565b83610bd7565b5073900f717ea076e1e7a484ad9dd2db81ceec60ebf173ffffffffffffffffffffffffffffffffffffffff604084015116141561053f565b60046040517f99e120bc000000000000000000000000000000000000000000000000000000008152fd5b610e60915060203d602011610e66575b610e5881836112b7565b81019061147e565b8361051a565b503d610e4e565b60208091610e7a84611433565b81520191019061039e565b60208091610e9284611227565b815201910190610334565b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576040517fdd62ed3e00000000000000000000000000000000000000000000000000000000808252306004830152738bb4c975ff3c250e0ceea271728547f3802b36fd602483015273900f717ea076e1e7a484ad9dd2db81ceec60ebf1916020918282604481875afa918215610d5057600092611074575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8210610f6d57005b604051908152306004820152738bb4c975ff3c250e0ceea271728547f3802b36fd6024820152928290849060449082905afa928315610d5057600093611045575b50198201809211611016576100b7917f095ea7b30000000000000000000000000000000000000000000000000000000060405192830152738bb4c975ff3c250e0ceea271728547f3802b36fd60248301526044820152604481526110118161129b565b611496565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9092508181813d831161106d575b61105d81836112b7565b810103126100b957519183610fae565b503d611053565b9091508281813d831161109c575b61108c81836112b7565b810103126100b957519084610f43565b503d611082565b346100b95760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b9576020604051738bb4c975ff3c250e0ceea271728547f3802b36fd8152f35b346100b95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b95773ffffffffffffffffffffffffffffffffffffffff8061113d611204565b16600052600160205260406000209061120082549180600185015416938160028201541691600382015461117f600860068501549360078601541694016112f8565b93604051978897885260208801526040870152606086015263ffffffff908181166080870152818160201c1660a0870152818160401c1660c0870152818160601c1660e0870152818160801c16610100870152818160a01c1661012087015260c01c166101408501526101608401526101a0806101808501528301906113bd565b0390f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100b957565b359073ffffffffffffffffffffffffffffffffffffffff821682036100b957565b90600182811c92168015611291575b602083101461126257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611257565b6080810190811067ffffffffffffffff82111761020357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761020357604052565b906040519182600082549261130c84611248565b90818452600194858116908160001461137b5750600114611338575b5050611336925003836112b7565b565b9093915060005260209081600020936000915b81831061136357505061133693508201013880611328565b8554888401850152948501948794509183019161134b565b90506113369550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880611328565b919082519283825260005b8481106114075750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016113c8565b67ffffffffffffffff81116102035760051b60200190565b359063ffffffff821682036100b957565b67ffffffffffffffff811161020357601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b908160209103126100b9575180151581036100b95790565b604051604081019080821067ffffffffffffffff83111761020357611530916040526000806020948584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648685015285815191018273900f717ea076e1e7a484ad9dd2db81ceec60ebf15af13d156115d9573d9061151482611444565b9161152260405193846112b7565b82523d60008684013e6115dd565b8051908161153d57505050565b828061154d93830101910161147e565b156115555750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6060905b9091901561166c57508051156115f05790565b73900f717ea076e1e7a484ad9dd2db81ceec60ebf13b1561160e5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b81511561167c5750805190602001fd5b6116ba906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906113bd565b0390fd5b908160209103126100b9575173ffffffffffffffffffffffffffffffffffffffff811681036100b95790565b8181106116f5575050565b600081556001016116ea565b73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090604051916101e0830183811067ffffffffffffffff821117610203576040528054835273ffffffffffffffffffffffffffffffffffffffff600182015416602084015273ffffffffffffffffffffffffffffffffffffffff600282015416604084015260038101546060840152600481016040518082602082945493848152019060005260206000209260005b818110611e505750506117c7925003826112b7565b6080840152600581016040519081602082549182815201916000526020600020906000915b816007840110611de557936118d09593819361184d936008975491818110611dce575b818110611db5575b818110611d9b575b818110611d81575b818110611d67575b818110611d4d575b818110611d33575b10611d25575b5003826112b7565b60a086015263ffffffff600682015481811660c0880152818160201c1660e0880152818160401c16610100880152818160601c16610120880152818160801c16610140880152818160a01c1661016088015260c01c1661018086015273ffffffffffffffffffffffffffffffffffffffff6007820154166101a0860152016112f8565b6101c083015273ffffffffffffffffffffffffffffffffffffffff60208301511615610b53578015611c94575b63ffffffff421661012083015280606083015280611919575050565b6040517f2acd7ec400000000000000000000000000000000000000000000000000000000815273900f717ea076e1e7a484ad9dd2db81ceec60ebf16004820152602081602481738bb4c975ff3c250e0ceea271728547f3802b36fd5afa908115610d5057600091611c62575b5063ffffffff610140840151169080828102048214811517156110165702811115611c1b5750604051907fb9d81abc000000000000000000000000000000000000000000000000000000008252602060048301528161020481018251602483015273ffffffffffffffffffffffffffffffffffffffff602084015116604483015273ffffffffffffffffffffffffffffffffffffffff6040840151166064830152606083015160848301526080830151906101e060a484015281518091526020610224840192019060005b818110611bec5750505060a0830151907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8382030160c48401526020808351928381520192019060005b818110611bcd57505050611b7e82916101c08563ffffffff60c060209801511660e486015263ffffffff60e08201511661010486015263ffffffff6101008201511661012486015263ffffffff6101208201511661014486015263ffffffff6101408201511661016486015263ffffffff6101608201511661018486015263ffffffff610180820151166101a486015273ffffffffffffffffffffffffffffffffffffffff6101a0820151166101c486015201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016101e48501526113bd565b03816000738bb4c975ff3c250e0ceea271728547f3802b36fd5af18015610d5057611ba65750565b602090813d8311611bc6575b611bbc81836112b7565b810103126100b957565b503d611bb2565b825163ffffffff16845286945060209384019390920191600101611a9a565b825173ffffffffffffffffffffffffffffffffffffffff16845286945060209384019390920191600101611a50565b6113369150604051907fa9059cbb0000000000000000000000000000000000000000000000000000000060208301523360248301526044820152604481526110118161129b565b90506020813d602011611c8c575b81611c7d602093836112b7565b810103126100b9575138611985565b3d9150611c70565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208160248173900f717ea076e1e7a484ad9dd2db81ceec60ebf15afa908115610d5057600091611cf3575b506118fd565b90506020813d602011611d1d575b81611d0e602093836112b7565b810103126100b9575138611ced565b3d9150611d01565b60e01c815260200138611845565b92602060019163ffffffff8560c01c16815201930161183f565b92602060019163ffffffff8560a01c168152019301611837565b92602060019163ffffffff8560801c16815201930161182f565b92602060019163ffffffff8560601c168152019301611827565b92602060019163ffffffff8560401c16815201930161181f565b92602060019163ffffffff85831c168152019301611817565b92602060019163ffffffff8516815201930161180f565b926001610100600892865463ffffffff8082168352808260201c166020840152808260401c166040840152808260601c166060840152808260801c16608084015260a08183821c169084015260c09082821c169083015260e090811c908201520194019201916117ec565b845473ffffffffffffffffffffffffffffffffffffffff168352600194850194869450602090930192016117b256fea26469706673582212208d99a225d8edaaafa5d9032f5cc78e89bc1ebe886976815051cd3884e078252464736f6c63430008110033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "kind": "dev",
    "methods": {
      "merklDistributionCreator()": {
        "details": "Address is the same across the different chains on which it is deployed"
      },
      "notifyReward(address,uint256)": {
        "details": "Callable by any contractThis method can be used to recover leftover ANGLE tokens in the contract"
      }
    },
    "title": "MerklGaugeMiddlemanPolygon",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "Contract handling access control"
      },
      "angle()": {
        "notice": "Address of the ANGLE token"
      },
      "gaugeParams(address)": {
        "notice": "Maps a gauge to its reward parameters"
      },
      "merklDistributionCreator()": {
        "notice": "Address of the Merkl contract managing rewards to be distributed"
      },
      "notifyReward(address,uint256)": {
        "notice": "Transmits rewards from the `AngleDistributor` to the `DistributionCreator` with the correct parameters"
      },
      "notifyRewardWithTransfer(address,uint256)": {
        "notice": "Fetches tokens and transmits rewards in the same transaction"
      },
      "setAngleAllowance()": {
        "notice": "Restores the allowance for the ANGLE token to the `DistributionCreator` contract"
      },
      "setGauge(address,(bytes32,address,address,uint256,address[],uint32[],uint32,uint32,uint32,uint32,uint32,uint32,uint32,address,bytes))": {
        "notice": "Specifies the reward distribution parameters for `gauge`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11485,
        "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
        "label": "accessControlManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICore)11368"
      },
      {
        "astId": 11491,
        "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
        "label": "gaugeParams",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(DistributionParameters)13685_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICore)11368": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(DistributionParameters)13685_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DistributionParameters)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributionParameters)13685_storage"
      },
      "t_struct(DistributionParameters)13685_storage": {
        "encoding": "inplace",
        "label": "struct DistributionParameters",
        "members": [
          {
            "astId": 13654,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "rewardId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13656,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "uniV3Pool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13658,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "rewardToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 13660,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13663,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "positionWrappers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 13666,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "wrapperTypes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 13668,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "propToken0",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13670,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "propToken1",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13672,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "propFees",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13674,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "epochStart",
            "offset": 12,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13676,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "numEpoch",
            "offset": 16,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13678,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "isOutOfRangeIncentivized",
            "offset": 20,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13680,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "boostedReward",
            "offset": 24,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13682,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "boostingAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 13684,
            "contract": "contracts/middleman/MerklGaugeMiddlemanPolygon.sol:MerklGaugeMiddlemanPolygon",
            "label": "additionalData",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}